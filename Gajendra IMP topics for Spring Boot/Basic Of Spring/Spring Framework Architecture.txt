The Spring Framework is a widely used open source Java framework that
provides a comprehensive programming and configuration model for 
building enterprise applications.
Its architecture is designed around two core principles:
 i. Dependency Injection (DI).
 ii. Aspect - Oriented Programming (AOP).

The Spring framework consists of several modules, which can be categorized 
into four main areas:

1. The core container Provides the fundamental functionality of the Spring
framework, including the LoC Container and ApplicationContext. 

2. The Data Access/Integration area provides support for integrating with 
   database and other data sources.

3. The Web area provides support for building web applications, including 
   the Spring MVC and Spring WebFlux modules. 

4. The Miscellaneous area includes other modules that provide additional 
   functionality, such as the Spring Security module for authentication
   and authorization feature.

                    CORE PRINCIPLE OF SPRING FRAMEWORK
  #DEPENDENCY INJECTION (DI)
DI is a design pattern that promotes loose coupling between components
by allowing objects to be injected into a class rather than the class
creating them itself.
The Spring framework provides an Inversion Of Control (LOC) container
which is responsible for managing these dependencies.

The "BeanFactory" and "ApplicationContext" are the core interfaces of the
loC Container.
   *BeanFactory provides basic dependency injection.
   *ApplicationContext adds advanced features like 
    internationalization, event propogation and resource loading.

Spring manages the lifecycle of beans, including initialization,
destruction and scopes (e.g., singleton, prototype, request, session).

 # Aspect Oriented Programming (AOP)
It allows developers to modularize cross cutting concerns such as logging,
security and transaction management. These concerns can be applied across 
multiple components without modifying the core business logic.
Spring AOP uses advice, pointcuts, and aspects to implement cross -
cutting concerns. For example, u can use AOP to log method execution
times or enforce security checks.

Overall, the Spring framework architecture is based on the principles of
modularity, separation of concerns and flexibility, providing developers
with a powerful set of tools to build robust, scalable and maintainable
enterprise applications.
The framework's modular architecture allows developers to select only the
necessary modules for their specific needs, reducing unnecessary overhead
and complexity in the application.

The Spring framework is modular and consists of several modules that 
provide different functionalities to help build enterprise applications.
The modules can be broadly categorized into four main areas:
Core Container, Data Access/Integration, Web and Miscellaneous.
Let's take a closer look at each area and its corresponding modules:

                     CORE CONTAINER:
The Core Container provides the fundamental functionality of the
Spring framework, including the inversion of Control(loC) container 
and the AppliicationContext. It includes the following modules:

 Spring Core: This module provides the fundamental functionality of the
              Spring framework, including loC and DI. The LoC Container
 Is the Heart of the Spring framework, responsible for creating and
 managing instances of JavaBeans. It uses dependency injection to wire the
 beans together.

 Spring Beans: This module provides the BeanFactory, which is the basic  
               building block of the loC container, and the BeanWrapper,
 which is responsible for managing the lifecycle of a bean. The Bean 
 Factory is the core interface for accessing the loC container. It 
 provides methods for retrieving beans.

 Spring Context: This module provides the ApplicationContext, which is an 
 advanced version of the BeanFactory and provides additional features,
 such as internationalization and resource loading and the ability to 
 publish and consume events.
