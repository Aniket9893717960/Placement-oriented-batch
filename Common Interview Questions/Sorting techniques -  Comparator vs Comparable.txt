   Real - Life Analogy
   ----   ---- -------
Imagine you're organizing a cricket tournament:
  By default, you're sorting players by their jersey number - this is like
  'Comparable'(default sorting logic).
  But now, someone asks you to sort by highest runs scored or alphabetically
  by name - this is like  'Comparator'(custom sorting logic).

 Comparable Interface (java.lang.Comparable)
 -------------------------------------------
Is used when you want to define the natural/default sorting order of your 
objects.You need to implement this interface in the class of the objects 
you're sorting.
Syntax
  public class Student implements Comparable<Student>{
      int id;
      String name;

      public int compareTo(Student other){
            return this.id - other.id; //ascending order by id
      }
  }
 key Points:
It's in the java.lang package.
Has only 1 method:
               int compareTo(T o);
You modify the class itself to define the sort logic.
Only one sorting logic can be applied (natural order).

 Example:
   List<Student> list = new ArrayList<>();
   list.add(new Student(101,"Aniket"));
   list.add(new Student(99, "Ravi"));
   Collection.sort(list);


 Comparator Interface (java,util.Comparator)
 --------------------
Comparator is used when you want to define custom sorting outside the
class or want multiple ways to sort the same objects.

Syntax :
   class SortByName implements Comparator<Student>{
       public int compare(Student a, Student b){
         return a.name.compareTo(b.name);
       }
   }

 Key Points:
it's in the 'java.util' package.
Has 2 main methods (Java 8+ has more):
          int compare(T o1,T o2);
         boolean equals(Object obj);   //optional
Allows multiple sorting logics(by name, by marks etc).
Doesn't need to change the actual class.

 Example:
   List<Student> list = new ArrayList<>();
   list.add(new Student(101, "Aniket"));
   list.add(new Student(99, "Ravi"));
   Collections.sort(list, new SortMyName());  // sort by name

 Key Differences: Comparator vs Comparable
 -----------------------------------------
  feature             Comparable           Comparator 
1. Interface          java.lang             java.util
  Package
2.  Method        compareTo(Object o)   compare(Object o1, Object o2)
3.  Sorting          Inside                  Outside
 logic location     the class               the class.
4. Flexibility   Only one way to sort    Multiple ways to sort
5. Modifying           Yes                   No
class needed  
6. Used With    Collections.sort(list)   Collections.sort(list, comparator).

 Java 8+ Comparator Magic (Lambda Style)
 ---------------------------------------
Way cleaner with lambda expressions.
         list.sort((s1, s2) -> s1.name.compareTo(s2.name));
Or even:
         list.sort(Comparator.comparing(Student::getName));

 When to Use What?
 Scenario                                                   Use
You want a default sort order                           Comparable
             (like roll no or ID)
You want multiple or custom sorting                     Comparator
         logics (by name, marks, etc)
You don't want to modify the class                      Comparator

 Final Example (Both in One)
CODE
class Student implements Comparable<Student>{
    int id;
   String name;

  public int compareTo(Student other){
     return this.id - other.id;
  }
}

class SortByName implements Comparator<Student>{
   public int compare(Student a, Student b){
     return a.name.compareTo(b.name);
   }
}

// Usage:
Collections.sort(list); // uses Comparable (by ID)
Collections.sort(list, new SortByName());
                       // uses Comparator (By Name)
