So, now let's fetch the data which you are storing Now basically to do that
we have to add the code in the findAll.So, basically this is not what we 
want now SO, we replace 'findAll' old data with new.
OLD CODE in 'StudentRepo':
  public List<Student> findAll(){
    List <Student> student = new ArrayList<>();
    return student;
  }
New CODE Now we construct after remove it SO, basically when u use a query So,
first of all, let's use a query.
  Sting sql = "Select * from student";
               Now how do you fetch all data from database or from the 
table. You say "Select * from student". And now i went to execute this
query. So, whenever you use a select query in JDBC. we have to execute
a method called execute query.

But here, if you say jdbc, we don't have execute query, but we have a 
query. Now query takes two parameters. 
  first the actual query, which is sql in this case,
  second build the object of "Rowmapper".

So, if u go to the query u have allot of options in which u have to choose
the first one is string, the sql.Second one is 'Rowmapper', basically you 
can fetch data from you result set.
If u remember in JDBC, whenever you file a query, a select query,u get a 
'ResultSet'.In this result set you have all your data. Now from this 
resultSet, you get one by one data and 'RowMapper will help you to fetch 
  that data' from the Result Set.

So, let's use the 'RowMapper' so, what exactly is 'RowMapper'.IN this u
have to specify the type of 'student' because that's what you're working 
with and let's say this is mapper = new.

Okay. the thing is, is it a class or the interfaces? Let's check that
first. if you click here, oh, it's an interface and the thing is this is
a functionInterface. That means we can use lambda expression as well.

If i want to make this work I have to say new RowMapper.And basically we 
have to implement this method, which is mapRow. If you can see,
Now 'MapRow' will take two parameters.
CODE:
     public List<Student> findAll(){
        String sql = "select * from student";
        RowMapper<Student> mapper = new RowMapper<Student>(){
          @Override
   public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
      return null;
          }
        };
       jdbc.query(sql, )
     }
i. Is the 'ResultSet' that's what we you get from executing the query
and then the rowNum, So, what it simply says is,
"Hey, you know i have a method called mapRow." the job of 'mapRow' is to
take one row at a time from the result set and give it to u.
Now what you want to do, so when i say you,

DEFINATION OF MAPROW: it will give u one row at a time or one particular 
data and object at a time from the resultset.

Now this rowNum is something which you mapRow uses behind the scene. if u
want to use it, you can but we'll not be using this. We'll only you be
using the result set. And we will be getting one row at a time, right?
So, how do we use it?

So, i went to fetch data from the resultSet. If i say 'rs.' you can say
we have some methods like getIn or getString. We have use the same thing 
in JDBC. So, if u went to use it and store it somewhere,
i. we create a student object. with a "Student = new Student();" And then
i can set the value for 'Student'.

We can set the value for 'Student' let's say 'setRollNo' but this 
'setRollNo' will be coming from the result set. So, i can say 
'rs.getInt' because it's of type 'Integer', And you can specify the
column no. , column name.

I will specify the column name here. I will say rollno. and you have
to do the same thing for other methods as well. So, i say 'setName'
'rs.' 'getString' And we have to specify the column nane which is name
in this case.

And then we have to say 's.setMarks' which is coming from resultSet again
then i would sey 'getin' because the type of marks is 'int', Then i can
specify marks. So, basically u are fetching data from the result set.
And saving it in 'student'.

And you can see 'mapRow', written type is 'Student'. So, i can simply 
return 's' here. So, what 'mapRow' will do is it will fetch data from the
'ResultSet'.
It will fetch data from 'resultSet' and say hey what u wanna do with this
What we are doing is taking the data adding it to the student object and 
returning it.

So, this is the object basically we have to pass the query. So, as i 
mentioned , you have to pass two things and that's what we are doing at 
below code:
CODE:
      jdbc.query(sql, mapper);

But this query returns you the list of values. So, if you click on query,
you can say it returns the list of the type. So, the type is 'Student',
So, it returns the list of students and that's what we are returning, 
right?

So, i can say return jdbc.query. So, this will returns the list of 
students and that's what we are returning.
At last the Final code given below to fetch data.
CODE in 'StudentRepo':
public List<Student> findAll(){
        String sql = "select * from student";
        RowMapper<Student> mapper = new RowMapper<Student>(){
            @Override
            public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
                Student s = new Student();
                s.setRollNo(rs.getInt("rollno"));
                s.setName(rs.getString("name"));
                s.setMarks(rs.getInt("marks"));
                return s;
            }
        };
        return jdbc.query(sql, mapper);
    }

Such a lengthy code but it's better than what we have done with the 
normal JDBC, right? And I hope this will work. So, let's run this and i 
hope it will work.
