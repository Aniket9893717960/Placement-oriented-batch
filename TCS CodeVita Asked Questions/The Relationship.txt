The people of Kingdoms of Westeros are very organized. They are very devoted to their leader and cannot live without a leader even for a single day. Marriages, divorces, births, and deaths are everyday things in Westeros and because of these events people of Westeros need to spend their time on choosing the leader. People badly need a programme to find the new leader in case of these events. The criteria to choose the leader is as below.   The leader of the family will be the oldest person. [Age of each member in a particular family will be different]. For simplicity, consider surname as family name. In the input though family name will be mentioned explicitly. 2 or more families are said to be related if a boy from one family has married a girl in the other family. Thus, related families will have a single leader who will be the senior most person from the newly formed cluster of families. If 2 members from this cluster have the same age, then the person with larger family will be the leader of the new cluster. If that also results in a tie, then the person whose name comes first in lexicographical order will be the leader After marriage the wife will assume husband’s family name and will be counted as a family member of the husband’s family. If new Birth happens, children will take fathers family name. If Divorce happens 2 families will split, the wife will assume her maiden family name. All children will be counted as members of their father’s family. The families will choose new leaders. After divorce the wife will assume her birth family name and hence husband’s family may no longer be relatives, provided there is no other marriage bond between these two families. If any Death happens and the deceased person was the leader, the family / cluster will choose a new leader. If a married women dies, the relation between 2 families will break i.e. they will split by family name If a married woman dies the relation between 2 families (husband and wife) will break provided there is no other marriage bond between 2 families. From perspective of answering queries, unless the husband remarries, the name of the dead wife should be printed as Spouse Name If a married man dies the relation between 2 families (husband and wife) will not break. Wife will still be considered as husband’s family until she marries someone else. From perspective of answering queries, unless the wife remarries, the name of the dead husband should be printed as Spouse Name Every Person in Westeros has a unique name. Every person in a particular family will have different age. Polygamy or polyandry is not permitted. A person can have only one spouse at any time. Although Remarriage after divorce is possible NA will appear in input wherever not applicable  

Constraints :

1 <= N <= 500

1 <= E <= 100

Input :

First line contains an integer denoting the number of records (N).

Next N lines contain one record each i.e., space separated data about every person in the format Firstname FamilyName BirthFamilyName Gender FatherName SpouseName Age Next line contains an integer denoting the number of events (E). Next E lines contain data about respective event. The events are recognized by keywords and apply to one of more persons as explained below   Marriage between Person1 and Person2 will be depicted as:   MA Person1 Person2   Divorce between Person1 and Person2 will be depicted as:   DI Person1 Person2   Birth will be depicted by:   BI NameOfTheNewBorn Gender Father Mother   Death will be depicted by:   DE Person1   Year Passed will be depicted by:   YP   Print All:   PA   Print One:   PO Person1   For more clarity, refer Examples section

Output : Output only for events PA (Print All) and PO (Print One). For PO print only the person details provided in the input. For PA print all persons who are alive, separated by new line and sorted in lexicographical order of the person’s name. No need to print details of dead person. Data must be computed internally for each event even if print is not followed by that event. Print as below respectively separated by space for each person.   Firstname Family Name Birth Family Name Gender Father Name Spouse Name Age Leader Name  

Time Limit :

1 secs

Examples :

Input :

9 Jamie Lannister Lannister Male Tywin NA 50 Cersei Lannister Lannister Female Tywin NA 45 Tywin Lannister Lannister Male NA NA 70 Robert Baratheon Baratheon Male NA NA 50 Stannis Baratheon Baratheon Male NA NA 48 Renly Baratheon Baratheon Male NA NA 40 Edward Stark Stark Male NA Catelyn 48 Rob Stark Stark Male NA NA 14 Catelyn Stark Tully Female NA Edward 42 9 PA MA Cersei Robert PO Cersei DE Tywin PO Jamie BI Joffrey Male Robert Cersei YP 5 DI Cersei Robert PA Output : Catelyn Stark Tully Female NA Edward 42 Edward Cersei Lannister Lannister Female Tywin NA 45 Tywin Edward Stark Stark Male NA Catelyn 48 Edward Jamie Lannister Lannister Male Tywin NA 50 Tywin Renly Baratheon Baratheon Male NA NA 40 Robert Rob Stark Stark Male NA NA 14 Edward Robert Baratheon Baratheon Male NA NA 50 Robert Stannis Baratheon Baratheon Male NA NA 48 Robert Tywin Lannister Lannister Male NA NA 70 Tywin Cersei Baratheon Lannister Female Tywin Robert 45 Tywin Jamie Lannister Lannister Male Tywin NA 50 Robert Catelyn Stark Tully Female NA Edward 47 Edward Cersei Lannister Lannister Female Tywin NA 50 Jamie Edward Stark Stark Male NA Catelyn 53 Edward Jamie Lannister Lannister Male Tywin NA 55 Jamie Joffrey Baratheon Baratheon Male Robert NA 5 Robert Renly Baratheon Baratheon Male NA NA 45 Robert Rob Stark Stark Male NA NA 19 Edward Robert Baratheon Baratheon Male NA NA 55 Robert Stannis Baratheon Baratheon Male NA NA 53 Robert Explanation : In the Sample inputs data is provided for 3 families viz. Lannister, Baratheon and Stark, and there is no relationship among them. So, at first leader of each family been selected from each family separately based on oldest members. After event of marriage between Robert and Cersei, Baratheon and Lannister become relatives and Tywin has been chosen leader of both the families. When Cersei’s details are printed she is already married and hence her family name is now Baratheon. After death of Tywin, Robert has been chosen leader although age of Jamie and Robert was same. Robert was chosen the leader since Baratheon family has more members than Lannister family. This can be seen when we printed Jamie’s details. Five years after Joffrey’s birth and post the divorce of Robert and Cersei, relations between Lannister and Baratheon family have broken and Jamie became leader of Lannister family as he was the oldest. Joffrey stays with father’s family name. As Tywin is dead his details have been not printed.

                               ANSWER :-

import java.util.Scanner;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
class Person {
    String firstname;
    String familyname;
    String birthfamilyname;
    String gender;
    String fathername;
    String spousename;
    int age;
    String leadername;
    Person(String firstname, String familyname, String birthfamilyname, String gender, String fathername, String spousename, int age) {
        this.firstname = firstname;
        this.familyname = familyname;
        this.birthfamilyname = birthfamilyname;
        this.gender = gender;
        this.fathername = fathername;
        this.spousename = spousename;
        this.age = age;
        this.leadername = firstname;
    }
}
public class FamilyTree {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int N = scanner.nextInt();
        Map people = new HashMap<>();
        for (int i = 0; i < N; i++) {
            String firstname = scanner.next();
            String familyname = scanner.next();
            String birthfamilyname = scanner.next();
            String gender = scanner.next();
            String fathername = scanner.next();
            String spousename = scanner.next();
            int age = scanner.nextInt();
            Person person = new Person(firstname, familyname, birthfamilyname, gender, fathername, spousename, age);
            people.put(firstname, person);
        }
        int E = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < E; i++) {
            String event = scanner.nextLine();
            if (event.equals("PA")) {
                List alivePeople = new ArrayList<>();
                for (Person person : people.values()) {
                    if (person.age > 0) {
                        alivePeople.add(person.firstname);
                    }
                }
                Collections.sort(alivePeople);
                for (String personName : alivePeople) {
                    Person person = people.get(personName);
                    System.out.println(person.firstname + " " + person.familyname + " " + person.birthfamilyname + " " +
                            person.gender + " " + person.fathername + " " + person.spousename + " " + person.age + " " + person.leadername);
                }
            } else if (event.startsWith("PO")) {
                String name = event.substring(3);
                Person person = people.get(name);
                System.out.println(person.firstname + " " + person.familyname + " " + person.birthfamilyname + " " +
                        person.gender + " " + person.fathername + " " + person.spousename + " " + person.age + " " + person.leadername);
            } else if (event.startsWith("MA")) {
                String[] parts = event.split(" ");
                String person1 = parts[1];
                String person2 = parts[2];
                String family1 = people.get(person1).familyname;
                String family2 = people.get(person2).familyname;
                people.get(person1).spousename = person2;
                people.get(person2).spousename = person1;
                if (!family1.equals(family2)) {
                    chooseLeader(family1, people);
                    chooseLeader(family2, people);
                }
            } else if (event.startsWith("DI")) {
                String[] parts = event.split(" ");
                String person1 = parts[1];
                String person2 = parts[2];
                people.get(person1).spousename = "NA";
                people.get(person2).spousename = "NA";
                String family1 = people.get(person1).familyname;
                String family2 = people.get(person2).familyname;
                chooseLeader(family1, people);
                chooseLeader(family2, people);
            } else if (event.startsWith("BI")) {
                String[] parts = event.split(" ");
                String name = parts[1];
                String gender = parts[2];
                String father = parts[3];
                String mother = parts[4];
                Person person = people.get(name);
                person.familyname = people.get(father).familyname;
                person.birthfamilyname = people.get(father).familyname;
                person.fathername = father;
                person.spousename = "NA";
                chooseLeader(people.get(father).familyname, people);
            } else if (event.startsWith("DE")) {
                String personName = event.split(" ")[1];
                Person person = people.get(personName);
                person.age = -1;
                chooseLeader(person.familyname, people);
            } else if (event.startsWith("YP")) {
                int years = Integer.parseInt(event.split(" ")[1]);
                for (Person person : people.values()) {
                    if (person.age > 0) {
                        person.age += years;
                    }
                }
            }
        }
    }
    private static void chooseLeader(String familyname, Map people) {
        List familyMembers = new ArrayList<>();
        for (Person person : people.values()) {
            if (person.familyname.equals(familyname)) {
                familyMembers.add(person.firstname);
            }
        }
        Collections.sort(familyMembers);
        String leader = familyMembers.get(0);
        for (String member : familyMembers) {
            if (people.get(member).age > people.get(leader).age) {
                leader = member;
            }
        }
        people.get(leader).leadername = leader;
        for (String member : familyMembers) {
            people.get(member).leadername = leader;
        }
    }
}
