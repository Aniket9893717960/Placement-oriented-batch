The Spring framework is an application framework and inversion of control
container for the Java Platform. The framework's core features can be used
by any Java application, but there are extensions for building web 
applications on top of the Java EE platform.

                           SPRING DAO
It is not a spring module. It does not provide interfaces or templates to
access the data. One important change that needs to be written while using 
Spring DAO is, that it has to be annotated with @Repository.
The reason for doing this is the exceptions that may arise in the 
underlying technology like JDBC, Hibernate, JPA and etc are 
consistently translated into their respective "DataAccessException" subclass. Let us see this with one example of a Student service 
scenario.
Initially, Hibernate is the persistence mechanism that got used.  Suppose
let us assume that "HibernateException" is caught at the service layer.
There should be steps available to catch it. But at some point in time,
instead of Hibernate, it has been changed to JPA, then no need to change
the DAO interfaces.

Instead, if it is annoted with @Respository, then the exceptions related 
to the current underlying technologies will be directly translated to the
spring "DataAccessException". Because of this feature, through the under
lying technologies are changed from hibernate to JPA or from JPA to 
hibernate, then the same Spring DataAccessExceptions will still be 
thrown.
According to the underlying technologies, the spring will translate 
according to their native exceptions.

  #Limitations in Spring DAO related to Exceptions
*Should not catch persistence exceptions.
*The hierarchy of exceptions is usually richer and more meaningful than
 the one provided by spring. But there is no mapping form one provider
 to the other. The reason for adding '@Respository' in the DAO is the
 beans are automatically added by the scan procedure. Spring has the 
 tendency to add other useful features to the annoations.

Sample code snippet related to Spring DAO. Service implementation layer
has to get annotated with '@Respository' followed by its corresponding 
service layer.
       PROGRAM
     // Necessary imports
    @Resporitory('<Specify the DAO that is getting accessed>')
     //  Eg : StudentDAO
    public class StudentDAOImplementation extends HibernateDao<Student, 
    Long> implements StudentDAO {
    @Override public boolean remove(Student studentObject){
     // Write necessay steps
     return true;
    }
   }

                         SPRING ORM
It is a very efficient module that plays as an umbrella pattern. The 
reason for calling this an umbrella is it covers many persistence 
technologies, manely JPA, JDO, Hibernate and IBatis. For every
individual technolgy, integration classes are provided by Spring.
With that integration classes, each technology integrates easily with
Spring transaction management. Mainly injection of DataSource is done via
SessionFactory or EntityManagerFactory etc.
In case of pure JDBC. apart from JdbcTemplate, there is no need for any integration class as JDBC (Directly relies on DataSource).

For each technology, the configuration basically consists in injecting 
a DataSource into some kind. For pure  JDBC, there's no need for such 
integration classes(apart from JdbcTemplate), as JDBC only relies on a
DataSource. Spring-JDBC is not required in the case of ORM like JPA or
Hibernate but Spring-Data is required.

Spring Data is nothing but an umbrella project and it can provide a 
common API that defines accessing the DAO and annotations and it covers
both SQL  and NOSQL data sources. Model classes have to get annotated 
with '@Entity' and in that primary key has to get annotated with '@Id'.
The sample code for 'Student' Model Class is given below.
      PROGRAM
   // Necessary impory statements
   // This is much required and here model class
   // should match with database table name
   @Entity
   public class Student {
      @Id
      private int studentId;
      // other necessary attributes like name, address etc.,
      // Corresponding getter and setter methods.
   }

Spring ORM DAO and service class has to get annotated with '@Component'
   //Necessary import statements
   @Component
   public class StudentDAO {
      @PersistenceContext
      private EntityManager em;
      // Rest set of code
   }

                        SPRING JDBC
JdbcTemplate class is provided by Spring JDBC. It directly helps to check
out SQL queries and parameters. No need to worry about the plumbing code 
as it does not require that. Configuration with a DataSource is 
manadatory. The sample code is given below.
      PROGRAM
   //necesary import statements
   int totalStudents = jdbcTemplate.queryForObject("select count(1) 
   from Student", Integer.class);
   Student student = jdbcTemplate.queryForObject("select name, address
   from Student where id=?",
         rs -> new Student(rs.getString(1), rs.getString(2)),
         12345);
