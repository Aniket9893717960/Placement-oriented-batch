Let's go back to 1970s that's right when the computers were new, so in 1970s,
we were tryin to solve simple problems wit the help of computers, maybe 
scientific problems, but then they were simple in today's term.

Now after the successfult use of computers for the scientific and research
purpose, we thought can we use it for commercial use as well? And that's
where in early nineties or late nineties, lot of people, lot of 
companies started Using Software and computers for te internal use.

Also, we got social media websites in early 2000, but now if u try to 
understand te entire ecosystem, Or if we try to understand the world of 
software everywhere, in fact, everyting in the world is happening with
the help of softwares.

       If u want to book a cab, u will use software.
       If u want to transfer the money, u will use software.
       If u want to buy something online, u will use software.

If everything will be done with the help of Software which u normally call
them as application, what normally happens is we build a particular 
website, and that's what we call them. we build a website.

And in that particular website, u will be having all the services.
Now, when u talk about services, what exactly it means?
            Now, imagine a shopping website,
            Example if u go to Amazon,
u get allot of Features there on Amazon, u can basically search for a 
product. U Buy a Product, add a product to a cart and then u can pay
for that online. And also as a seller, i can sell my own devices or
sell my own things on Amazon. Because it's also a market place.

So, basically, Amazon itself is a huge software which has a lot of 
different services right?

        NOW IF U WANT TO BUILD WEBSITE BY YOURSELF
 What u will do is u have a traditional mindset.Of course, one of the
best thing about building a software nowadays is we think about 
creating different modules.
So, what u do is u break down the entire project into Small parts.
And that's how we think so, if u want to build a website, I will just 
break down the services into small modules.

            We work on one particular module And 
           also that's what we also suggest,right?
U can divide your big team into small groups. So, let's say if u have
50 people working on a one big project U can have 5 different team of 
10? And 1 team will work on one particular feature, right?
And that's how u can build this amazing website like Amazon or 
amazon.com to buy something.

Now, the thing is, the approach is actually coming from the software 
development field. Now when u build a Normal software what are u 
tendencies? So, we have a software which works on a desktop.

In fact, when i started my career. I started in that zone. U just write
Which works on a particular machine, right? So, what u do is you structure.
Your entire application one device.

Now, that's what we do in the web World as well. Even if u have multiple
Teams, they are working on different services. They are still one 
package, right? So, in maybe in Java or in other languages.

You create a, let's say in Java, We create a WAR file or a Jar file.
U will put all the services in this particular WAR file. and then u will 
deploy this on a cloud on a server.

                    MONOLITHIC ARCHITECTURE 
The problem is u have a lot of services here on one system. So, let's talk
about some advantages of doing this. The advantage of doing this type
of architecture, which we normally call them as monolithic application.

Where u have everything in one place, all the services, right? Of 
course, they're designed by other members. U can simpley group them. 
U can form a particular package and u can deploy it.    

So, the good thing is U know what happening with the application, what
are drawbacks? There are multiple drawbacks with this type of 
architecture.

There are multiple drawbacks with this type of architecture.
 i. Team Dependencies: Let's say all U 10 teams are working together
    ------------------ to make all these features, they have to actually
    dependent on each other. They should know when u are going to go for
    the next release, right?
 So of course with every release, u go for a version. So, u have to 
 specify, Okay, I got a new feature, But let me know when i can push this
 feature in the product So, that we can deploy the entire project.

  ii. Scalability: If u talk about Amazon itself, in fact, we can take 
      -----------  we can take this example, or we can take This concept
  from multiple examples, multiple domains.
  But when u stik to amazon here let's say there's a sale going on.
  Now, if u know that tomorrow there will be a huge sale may be for some
  festival, some other event, what do u think, which of the services will
  be needed scalability here?
  In Monolithic Application, what happens is if u know that there's a 
  sale going on, or there will be sale happening next week, what u will
  do is u will scale u application in multiple systems, right?
  
  Maybe u will try to do vertical scaling by adding more servers or more
  RAM power, Or u can do the horizontal scaling. So, basically u will 
  have the same application and having multiple instance of them.

  Now in terms of sale It's not like u will get new users or u will get 
  a lot of new users. U will look at a lot of new sellers. what u will
  get is more searchers. u will get more payments. So, instead of 
  scaling the entire application, don't u think we should be scaling
  only the small modules there?

  So, that's what we want to use this particular service. So, instead of
  scaling the entire monolithic application, we should be able to scale
  that individual services. Next one Is what if u have a Big application
  And if u think we will build this application using as a one 
  monolithic application.

  U have to stick to one technology. Maybe if u're using Java for the 
  entire application, U have to stick to Java. Even If u have a New team
  who say okay, I want to work on node.js, they can't because  u are 
  building one big application, which will create one particular package.

  Which will go to one perticular server. What u can do is if u have a
  different services. U can create actually create different services
  using different technologies, right? So, that's what the advantage we 
  want, and that can be done with the help of microservices.
  So each service, which i'm talking about here, they are called 
  microservices.

                ADVANTAGES:
  If u have 10 teams they can divide the entire project into small 
 services. One thing u remember here, each service here should be self
 contained. It should be able to deploy it separately, and also they
 should be scaled separately.
 They should not be dependent on some other services. So each service 
 here will be called microservices. Now since they are microservices,
 we can create them in any technology we want.
 So one service can be done with Java.
 2nd with Node.Js

 And now since there are multiple services, u can scale them the way
 u want. Maybe if u have 10 services, I want to take this fifth And
 six service and i want, let's say 10 instance of them.

 I want the second service to have five instance. So, I can scale based
 on the service requirement, not for the entire application.
 or since they are seperate services, Even if some service goes down,
 it'll not affect the entire application.

 Now in term of monolithic application. If u make one change, It is not
 working, it'll crash the entire application. That's not the case with 
 microservices. So, basically what is microservices?

 They are individual services which are self contained. They can run as
 a individual service and maybe let's say if i want to go for, go to 
 Amazon, If i say i want to search for the products, that's one service.
 I want to create a new account. that's one service.
 I want to sell a particular product. That's one service.
 So, these are u microservices.

                   CONCLUSION
 So, Everything looks proper on paper right. We are saying that microser
 vices are great. Do, u have any challenge there? the thing is, yes.
Now since we have multiple services, how these services will communicate?
It's not like they can't, but then it's difficult to configure them okay?
 And u will be doing that only once.
 U have to use service discoveries, U have to use API gateway,
 Which will stand in front of all the services, and u will be also having
 some resilience system in between.

 what if some service failed? Do we have a field support there?
 and creating a microservices in not just writing a code, okay?
 It's also about creating the architecture before u write a single
 line of code. How do u design your system?

 How do u create those services? that's also important. And if u
 don't design your microservices properly, ultimately u are creating
 a worse system of monolithic application.

    ONE OF THE IMPORTANT QUESTION IS HOW THE SYSTEM COMMUNICATE?
 So, they basically use this HTTP request or response to communicate b/w
 each other. Of course, they'll be having endpoints to communicate.
 Also we have to think about security. because now since we have 
 different services, 
 It a customer sends a request, which services u have to go to and 
 does that particular user has access to do that. So, that's the 
 challenges of microservices, but it's an awesome thing, big companies
 they are using microservices on big level.
