           1. Why Do Error Happen? Why handle Them?
In life, mistakes and surprises are normal maybe u try to open a locked
door or call a friend with the wrong number. Computers run into similar
problems: dividing by zero, accessing missing files or getting bad user
input.
Without proper handling, programs creash or behave strangely. Professional
- quality code doesn't mastakes - it plans for them was designed to help u
handle these "exceptions" smartly, making your app reliable and safe.

                2. What is an Exception?  
An exception is Dart's way of saying, "Oops! Something went Wrong."
Whenever Dart faces a problem it can't solve (like trying to read a 
file doesn't exist), it throws an exception.
  i. Why does Dart use Exceptions?
 Exceptions instantly stop normal operations and allow u-the programmer-
 to react thoughtfully, rather than letting users see errors or crashes.

           3. How Dart throws and Catches Exceptions?
*Throwing an exception is Dart's way to report a problem.
*Catching an exception means preventing the crash and taking action, like
 showing a helpful message or trying something else.
Example: CODE: 
      void main() { try { int result = 10 ~/ 0; } //Division by zero!
      catch(e){ print('Error: $e'); //Handles the error, doesn't crash }}

  *try: Code that might cause problems goes here.
  *catch: What to do is a problem happens.
*finally: (optional) Code that should run whether there's an error or 
           not.
     i. Why does Dart have try/catch/finally?
 It keeps u code readable, organized and immediately signals which code
 break and how to handle it.

            4. Custom Exceptions - u can invert your own
Sometimes, u want to create u own rules for what counts as a problem.
Example: CODE: 
    class AgeException implements Exception { 
     String errMsg() => 'Age cannot be negetive!'; }
    void checkAge(int age){ if(age < 0){ throw AgeException(); } }
    try { checkAge(-5); } catch(e){ print(e); //AgeException! }
 
 i. Why did Dart add custom exceptions?
 Real apps have unique problems - like invalid login or low battery.
 Custom exceptions keep your error messages clear and relevant, so 
 u can fix and document issues as you design your app.

             5. Error Types - knowing the Difference
*Exceptions: Conditions your programs can maybe recover from
             ( missing file, user mistake ).
*Errors: Serious issues your code shouldn't try to fix (like running 
         out of memory).
  i. Why separate exceptions and errors?
 Dart decided this helps programmers focus on what they can control
 (exceptions), while system failures(errors) should still stop
 the program.

     6. Best Practices with Error Handling - why be Thoughtful?
*handle only real problems: Don't use exceptions for normal program
            flow - use them for truly exceptional circumstances.
*always inform the user: Show clear messages or hints, never leave
            them confused.
*Use 'finally' carefully:  Always clean up resources (like closing files)
             whether or not error happen.

i. Why did Dart promote these practices? They make software professional
      - easy to use, hard to break, and quick to fix when something's
    wrong.

                   SUMMARY OF LECTURE 10:
*Exceptions let Dart programs catch and recover form unecpected issues
 instead of crashing.
* 'try','catch' and 'finally' organize problem solving clearly.
*Custom exceptions let u define and react to app-specific problems.
*Dart's throughtful error handling keeps programs stable, maintainable
 and professional.
