First we talk about filter  method
                    -------
U can see 'Filter' needs an 'Object' of 'Predicate'
                 Main Question is What is Predicate ?
                 ------------------------------------

So, to work with predicate first we have to import 
  'java.util.function.Predicate' And i will click 'Predicate' 
  here SO, 'Predicate' is an Interface which belongs to a method
  'test' or this 'test' method will retruns you a boolean value.
And based on this 'boolean' value it can be either true or false.

If for the 'stream' we apply a particular value. if it's 'true'
  then we go ahead otherwise we stop.
So, let's implement a 'predicate' here.

  Predicate<Integer> p = new Predicate<Integer>(){
    //'Predicate' is an interface that's why we use Anonymous method here.
  };
Now we were adding the implementation method. to 
support 'Predicate' interface.
  
  public boolean test(Integer n){
    return false;
  }

  Now in this method we gonna check that if n is an even no
    then it return 'true' else return 'false'.

Now instead of 'n-> n%2==0' we previously putted in filter method
i can put 'p' at the command like this:

      List<Integer> nums = Arrays.asList(4,5,7,3,2,6);

    Predicate<Integer> p = new Predicate<Integer>(){
        public boolean test(Integer n){
            return n%2==0;
        }
    };

  int result = nums.stream()
                    .filter(p)
                    .map(n -> n*2)
                     .reduce(0, (c,e) -> c+e);

          System.out.println(result);

In 'Predicate' will be override the 'Functional Interface'
that's why we use lembda Expression here.

        Predicate<Integer> p = (n) -> n%2==0;

  And you have '(n) -> n%2==0' expression here.

This is how the 'Filter' works.
----------------------------------X------------------------------------------------
Now Next Topic Is 'Map' So, let's see How 'Map' work?
         If i go to 'Map' So, 'Map' Needs Object of the 'function'.
'Function' is this Function Interface which have two types. 
And we have given the method called 'apply'.
So, Now can we do it we have calling the method 'function'.
Now the function takes two types
      i. what it's accept 
      ii. what is return

           Function<Integer, Integer> fun = new Function<Integer, Integer>();

we have given the object 'Function' name is 'fun' which have the anonymous 
method. This will have only one method called 'apply'.
                   public Integer apply(Integer n){
                       return null;
                   }  
Whatever we wanna 'return' at 'Integer' parameter 'n' u just apply the value 
And we all know that it's the functional Interface.
     Now we will take 'fun' from 'Function<Integer, Integer>' put it in
     'map'.

Now we can do is this compress the data.
                  Function<Integer, Integer> fun = n -> n*2;
U know in 'fun' we just initialize the data So, you don't even need this :
                         .map(n -> n*2)
---------------------------------X-------------------------------------------------
