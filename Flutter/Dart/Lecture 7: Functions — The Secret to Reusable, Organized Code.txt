      1. Why Functions? The Reasoning Behind Their Role
Imagine U have a washing machine at home: whenever clothes get dirty,
u use the same process - load, add soap, set timer, wash, done!
You don't need to think about each step every time.
In programming, functions are like washing machines - they bundle a set
of actions together and let u use (or "call") them anytime.

 i. Why did Dart include functions?
 *To make code reusable (no repeating yourself).
 *To organize logic into "chunks" - each with a specific job.
 *To keep code cleaner and easier to read, fix, and share.

               2. Anatomy of a Dart function
 Every Dart Function has these parts:
  *Name (what do u call it?)
  *Parameters (what info does it need?)
  *return type (does it give something back?)
  *Body (the steps it performs)
 Example: "int add(int a,int b){ return a+b; }"
  *int: declares that this function returns an integer.
  *add: the function's name.
  *'int a, int b': asks for two numbers when called.
  *'{ return a+b; }': tells Dart to add and return the result.

 i. Why return types?
 Dart uses them so the computer (and you!) can predict what result will 
 come back - catching mistakes early and making programs safer.

              3. How to Call and Use Functions
When the washing machine is ready, u "call" it every time the 
clothes are dirty. 'Same in Dart!'.
Example call:
         var sum = add(3,5); // Returns 8
         print(sum)       // shows 8
 i. Why call functions by Name?
 Makes your code modular. instead of copying code everywhere,
 just call the function, saving space and reducing errors.

             4. Parameters: Sending info in
Sometimes u want to wash just one shirt, sometimes a whole batch!
 in Dart, u pass parameters to functions to change their behavior.
Example:
        void greet(String name){ print('Hello, $name!'); } greet('Amit');
 1. Why Parameters? Functions becomes flexible tools u can use in many
 scenarios by changing inputs, instead of rewriting code.

             5. Return Values: Getting info Out
Just as the washing machine returns clean clothes, functions often return
results.
Example: double area(double radius){ return 3.14 + radius + radius;}
         var result = area(5);
 i. Why return values? Lets your function give back results, so other 
    part of the program can use them - making your code a team player!

       6. Void Functions: When Nothing Needs to be Returned
Some task just do something (like printing or playing music), but don't 
give anything back. These use void: CODE:
       void printGreeting() { print('Welcome to Dart!'); }
 i. Why "void"?  Shows up front that the function won't give u back a 
             value - removes confusion and makes reading code easier for
             everyone.

           7. Arrow Syntax and Anonymous Functions
Dart provides shortcuts for small functions using => (arrow), and lets
u make nameless(anonymous) functions for quick use.
Example: CODE:
         int square(int x) => x*x;
         var numbers =  [1, 2, 3];
         numbers.forEach((n) => print(n));
 i. Why did Dart add these?
 Helps keep code concise and readable, especially for simple or one time
 tasks.

            8. Why is Dart's Function System So Flexible?
*Dart lets u return any type (numbers, text, Lists), pass any number of
 parameters and even create functions inside functions.
*This gives programmers full control making Dart powerfult for everything
 from simple scripts to large Flutter apps.

                    Summary Of Lec 7
*Functions bundle reusable actions, keep code and avoid repetition.
*Parameters let u costomize what a function does return values give 
 results back to your code.
*Dart's function syntax: clear and flexible with options for simple,
 anonymous or more complex functions.
*App logic becomes organized and professional when using functions well.
