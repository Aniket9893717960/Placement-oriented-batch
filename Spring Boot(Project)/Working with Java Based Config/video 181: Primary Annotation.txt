Now let's solve this problem. In the previous video we solve this with 
'Qualifier' and if we run the program we got error and we talk also
we used primary as well.
Where exactly we are going to use 'primary' So, where exactly we are going 
to use primary let's say we use 'primary' at the top of 'Desktop'.
Just by maintoining primary we will prefer desktop whenever u have the 
confusion.
But what happens when i used 'primary' and 'Qualifier' together.
Then if we run the program we get to know that 
'Qualifier' has more priority then 'primary' doesn't matter what primary
which primary u say if u maintoined 'Qualifier' it will follow that at 
particular one.

That's about 'primary' and 'Qualifier' which will get preference is 
'Qualifier' But if u want to resolve the confusion then u can use 
'primary' there.

Final Code 
         1. 'Desktop.java' program
@Component
@Primary
public class Desktop implements Computer {

	public  Desktop() {
		System.out.println("Desktop  Object Created");
	}
	@Override
	public void compile() {
		System.out.println("Compiling using Desktop");
	}
}
        2. 'Alien.java' program
@Component
public class Alien {
	
	private int age;
	
	private Computer com;
	
	public Alien() {
		System.out.println("Alien Object Created");
	}
  
  public int getAge() {
		return age;
	}
	
	public void setAge(int age) {    // Setter Injection
		//System.out.println("Setter called");
		this.age = age;
	}
	
	public Computer getCom() {
		return com;
	}
	
	
	@Autowired
@Qualifier("laptop")
	public void setCom(Computer com) {
		this.com = com;
	}
	
	public void code() {
		System.out.println("Coding");
		com.compile();
	}
}
           'Laptop.java'
@Component
public class Laptop implements Computer{
	public Laptop() {
	System.out.println("Laptop object created");
}
	
	@Override
	public void compile()
	{
		System.out.println("Compiling using Laptop");
	}	
}
