First we have to understand what is the function?
          i. we have to search about an Example to understand the need 
             Of function?
i. To reduce Bulky ness in the code.
ii. To reduce Debugging Issues.
Here Function will Said to 
'Preform Spacific task If you try to Perform same task with different input'
         This can be done Efficiently with the help of Function.
In Short Function contains the block of code which perform Specific task. 

                    JavaScript Function Syntax
                    --------------------------
A JavaScript function is defined with the function keyword, 
followed by a name, followed by parentheses ().

Function names can contain letters, digits, underscores, 
and dollar signs (same rules as variables).

The parentheses may include parameter names separated by commas:
(parameter1, parameter2, ...)

The code to be executed, by the function, is placed inside curly brackets: {}

function name(parameter1, parameter2, parameter3) {
  // code to be executed
}

Function parameters are listed inside the parentheses
() in the function definition.

Function arguments are the values received by the function when it is invoked.

Inside the function, the arguments (the parameters) behave as local variables.

                          Function Return
                          ----------------
When JavaScript reaches a return statement, the function will stop executing.

If the function was invoked from a statement, 
JavaScript will "return" to execute the code after the invoking statement.

Functions often compute a return value. 
The return value is "returned" back to the "caller":

Example
Calculate the product of two numbers, and return the result:

// Function is called, the return value will end up in x
let x = myFunction(4, 3);

function myFunction(a, b) {
// Function returns the product of a and b
  return a * b;
}
         Return :   The return statement stops the execution of a function and 
         -------                     returns a value.
           ------------------NOTE-----------
If you write code after 'return' statement Then it gives error name 
'Unreachable code' just like this Example :-
       function getMyName(firstName, lastName){
         let fullName = firstName + lastName;
         return fullName;
         }
         //unreachable statements
         let a = 10;
         let b = 20;
         let sum = a+b;
         console.log(sum);
         }
    let fullName = getMyName("Love","Babbar");
    console.log("Full Name: ", fullName);

* If 'getMyName("Love","Babbar");' we use Different parameter type like
number,boolean and etc Then what happend?
The Program will perfectly Exceuted Without any Problem because u doesn't 
Spacify the type of Data.In this case, the Function treat all the data as 
'String'.
                    Equating a Function to a Variable in Javascript
                    Is straightforward.
                       Here are the 3 Different Ways to do it:
                    -----------------------------------------------
1. Using Function Expressions : You can assign to a variable using a 
   --------------------------        function expression. PROGRAM
       const myFunction = function() {
           console.log("Hello, World!");
       };
              myFunction(); // Outputs: Hello, World!

2. Using Arrow Functions : Arrow Function provide a more concise syntax.
  -----------------------                  PROGRAM
                 const myFunction = () => {
                     console.log("Hello, World!");
                 };
                          myFunction(); // Outputs: Hello, World!

3. Using Function Declarations:       Although function declarations are not 
 ------------------------------       assigned to variables directly, they can be 
                                      referenced by variable names.
                     function myFunction() {
                         console.log("Hello, World!");
                     }
                       const anotherFunction = myFunction;
                     anotherFunction(); // Outputs: Hello, World!
