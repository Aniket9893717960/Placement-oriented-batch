                        -----------NOTE ------------
*Collection will extend/child of 'Iterable' or in 'Iterable' we 
have the option called Iterator.
*'Iterator' will return an Iterator.
*This will have the method called 'hasNext' which will told who is next.
                         --------X------------
At this point we were talk about 'list' right so,
we can create list and work with index's then
Only thing is if we talk about 'list' So, 
it's great does support multiple values it's a 
feature allright we doesn't talk about drowbacks here.

But some times you want to done a correction where you have the 
unique values whenever we talk about the 'collection interface'.

                        SET Interface
                        -------------
It was also Extended by 'SET' interface. Now 'SET' support unique
values what we do now is Instide of 'List' i will say 'SET' Values
Where 'SET' belongs to 'java.util' Package.

Now i want to specify not an 'array list' Because Yes 'Set' Extends
'Collection' i agree But class which implement 'SET' is different
So, the class name we use for 'SET' is 'HashSet' Apart from this the Syntax
will remain same also have 'add' method here
     Certain Things to Remember
     -------------------------- If you see the documentation then it says:
Set basically is a collection of unique values. More formally, sets contain 
no pair of elements e1 and e2 such taht 'e1.equals(e2)' , and at most
one null element.
As implied by its name, this interface models the mathematical set 
abstraction.

The 'Set' Interface places additional structure, beyond those inherited 
from the 'Collection' interface, on the contracts of all constructors and
on the contracts of the add, equals and hashCode methods.
Declaration methods are also included here for convenience.
Example:
            import java.util.HashSet;
            import java.util.Set;

            public class Ts{
                   public static void main(String args[]){
                       Set<Integer> nums = new HashSet<Integer>();
                         nums.add(6);
                         nums.add(5);
                         nums.add(8);
                         nums.add(2);
                         nums.add(6);

                        for(int n : nums)                            OUTPUT
                       System.out.print(n+"\t");           2       5       6       8
                }
            }
              The Certain Points we Get form this are:
i. Set Doesn't allow Repetative value.
ii. It will not print the value at same order.
                  ----------------NOTE---------------------
* Set Doesn't allow index oriented methords like 'get','indexOf'
* Set was introduced in version '1.2'
* This interface is also called as Java collection Framwork.
                  -----------------------------------------

                  What If you want Sorted Value in Set
                  -------------------------------------\
Nathing Just use the  class name 'TreeSet'.
            Set<Integer> nums = new TreeSet<Integer>();
TreeSet Extends the 'AbstractSet' and implement a 'NavigableSet<E>' and
If i go to 'NavigableSet<E>' so this 'NavigableSet' will extends the
'SortedSet' That's why all the elements in the tree Set will be sorted.

TreeSet is one of the most important implementations of the SortedSet interface in 
Java that uses a Tree(red â€“ black tree) for storage. The ordering of the elements is 
maintained by a set using their natural ordering whether or not an explicit 
comparator is provided. This must be consistent with equals if it is to correctly 
implement the Set interface. 

