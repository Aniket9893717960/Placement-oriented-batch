         Building Towards topic:
Now basically when u talk about applications,
I'm talking about enterprise level application.
Now, initally those application used to stay in on permise.
Basically every company will have their own servers and they will 
deploy the application on their own servers.

but then we have talked about cloud, right? Now most of the companies
are moving from on premise to cloud. So, basically all the services 
which we are using nowadays is cloud based.

Even the public application like Google Docs, Dropbox, Gmail, everything 
is cloud. Now the application which are used internally in the company,
they are also deployed on the cloud.

 Of course Not every Company is moving into it.
 but majorly, most of the applications are on cloud nowadays.
 Now, the moment u talk about cloud applications, We have 
 Two interesting terms here:
   CLOUD READY                         CLOUD NATIVE

It's IMP to understand difference b/w this 2. What we expect from the 
 cloud application is the cloud services. The moment u talk about
 cloud, it provides a lot of different benefits, right?

 Benefits in term of cost. 
 Benefits in term of scaling.
 Benefits in term of less issues.

 Now. if u want to achieve that, of course, U have to make an application
 which will use all those services and which will fullfill the promises,
 right? But what happens is the application which are deployed on the
 cloud out of two types, one is cloud-ready,
  2nd is cloud Native.

                WHAT DO U MEAN BY CLOUD READY?
let's say u already have an application in your premises, okay?
Or in your own local server. Now u want to move that particular
application on the cloud.

U make same changes Not like U picked up the application and throw it
on the cloud. No, that's not how it works.

basically u have to make some changes to your existing application and
u have to make it cloud ready, maybe work With the environment variable,
maybe work with the configuration files, And make sure that u are able 
to push your application on the cloud and u should be able to use the 
services.

So, u are basically making your non cloud ready application to cloud-ready
as simple as that. But on the other hand, if u really want to use all the 
cloud services And if u want to make it more effective.

                      CLOUD NATIVE?
U have to build an application as cloud native. Now normally, these type
of applications are new application.
Let's say u have to decide now. Do u want to build on premise or do
u want to use it on the cloud? And the moment u say, okay, that's what 
we are going for, we want to build an application which is for cloud,
make sure it is cloud native.

So, that u can use all the features. But how exactly u make a cloud native
application? In fact, the name itself says right, native. So, it is meant
for cloud. right? Now if u want to achieve this we can follow certain
standards and rules.

So, "HEROKU" has created some standard for u and u can follow them to 
build a better application for cloud, basically a cloud native 
application Of course right. How do u define a cloud native application?

So, just follow the rules and u are done. the thing is this rules actually
made a long back. And Now we have few changes, Now we talk about those
rules which have been developed  At that Point called 12 Factor App.

                      12 Factor App?
 1. CODEBASE:
 Now basically what happens is we normally store all the coding files
 in your folder, right? So basically when u make a project, U store that
 in your project.

 Maybe in IDE or any data which u use. Now, what code base says is if u 
 want to build a cloud native application, u have to make sure that your
 code base is using a version control.

 For Example: 
 One code base track in a revision control and many deploys.
 So, basically we can use something like a Git here.

 In Git u have to make sure that u store your project there in a local
 or maybe u can use some remote repositories, let's say Git Github And We
 have multiple options there.

 "U Have one Code Base For Development, Testing, Production, Analysis 
 too in one repository. And then u have a multipke deployments in staging"
  The thing is "U have one codebase for one application".

 Yeah, if u have one code base for multiple application, that's where 
 you're making rules. So, make sure that u have one code base for one
 application and not even multiple apps in one code base.
             "One code base for one application"
