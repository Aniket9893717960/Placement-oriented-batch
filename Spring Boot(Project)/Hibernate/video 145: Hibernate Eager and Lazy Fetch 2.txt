Now in this video we talk about "Eager Fetching" and "Lazy Fetching".
       Now basically the code which we have written for 'ManyToMany'
before i show u what is 'Eager Fetching'. 
I want to change this code a little bit
So, 'Alien' and 'Laptop' having the multiple relationship.
   I will go back to 'OneToMany' So, one alien have multiple laptop
And 'laptop' doesn't have the mapping and at all so, we remove below lines
                 @ManyToMany(mappedBy = "laptops")
                  private List<Alien> aliens;

Now we also remove 'getter's and setter's 'of 'aliens' in 'Laptop.java'
in 'Alien.java' nothing to change code will remain same now we moved on 
to 'Main.java'.

In 'Main.java' things will change a bit. Is because now we don't have
'laptop' setting the 'aliens' don't have set aliens in laptop so, we
can get afraid of him. And Delete below lines.
        l1.setAliens(Arrays.asList(a1,a3));
        l2.setAliens(Arrays.asList(a1,a2));
        l3.setAliens(Arrays.asList(a2));

Now we have to also make sure that one Alien will have multiple 
laptop and one laptop will belong to one alien But look at to over example which we have done before
we can modify to set laptop's lines to below line.
          Before
        a1.setLaptop(Arrays.asList(l1,l2));
        a2.setLaptop(Arrays.asList(l2,l3));
        a3.setLaptop(Arrays.asList(l1));
          After
        a1.setLaptop(Arrays.asList(l1,l2));
        a2.setLaptop(Arrays.asList(l3));

and also delete below lines
        Alien a3 = new Alien();
        a3.setAid(103);
        a3.setAname("Kiran");
        a3.setTech("AI");

And also we don't need to 'persist' 'a3' now when u see the code u will
not find the query So, what's wrong here. This is basically using the 
concept called 'cashe'.
So, in hibernate it will provide u the concept of 'cashe' which we don't 
get by default in jdbc That's one of the advantage of Hibernate.

So, we got 2 different lavel of cashe level 1 cashe and lavel 2 cashe.
And in the same session.
For example if u trying to see when i try to say 'get' and saying
'persist' in a same session.

It will not fire the query to the database basically it will check to
the same session and that's what it's happening here.
If u want to check that here it's fireing the query.
what u can do is create a new session here.
With the help of below cammand.

       Session session1 = sf.openSession();
          // with the help of this we got new session.

And i were also 'close' the session.Before we close the 'factory'.
we will write the below line between the 'session1' and 'close' it.

        Alien a5 = session1.get(Alien.class, 101);
        //System.out.print(a2);

Now we run and expect that 'alien' should fetch the query.
The Query should visible like this 
