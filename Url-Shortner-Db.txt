         Give me an overview about Your Project?
Url shortener a full stack web application to convert long URLs 
into short, shareable links while providing analytics on click -
through rates.
I have used some technologies in backend like:
Framework: Spring Boot (Java)
Database: MySQL (Stores users, URL mappings, and click events)
Authentication: JWT (Stateless, role-based access control)
APIs: RESTful endpoints for URL shortening,
       redirection and analytics.
   i. URL Shortening:
  Use Base62 encoding for compact, collision-resistant short codes.
  ii. Redirection:
  Handles high-volume redirects (HTTP 302) with minimal latency.
  iii. User Authentication:
  Secure registration/login using JWT tokens.
  Role-based access (e.g., ROLE_USER for basic features).
  iv. Analytics Dashboard:
  Visualizes click -through rates, geographic data(if implemented)
  and peak traffic times.
  support date-range filtering and pagination.
  v. Scalability:
  Stateless backend architecture for horizontal scaling.
  Caching (Redis) for frequently 
         Architecture:
             3-Tier Design:
                  Presentation Layer: React frontend (if applicable).
                  Application Layer: 
                  Spring Boot (controllers, services, repositories).
                  Data Layer: MySQL + Hibernate/JPA.

 EXPLAIN THE ALGORITHM YOU USED TO GENERATE SHORT URLs. Did You 
       CONSIDER COLLISIONS?
To generate short URLs, I implemented a Base62 encoding approach,
which converts a unique database ID into a compact, alphanumeric string.
  i. Input: A unique long ID (auto-incremented primary key
                              from the "UrlMapping" table).
  ii. Conversion Logic:
   Divide the ID by 62 and map the remainder to a character in the set
   Repeat until the ID becomes 0.
   Reverse the resulting string to get the short code.
 iii. Advanteges:
   Predictable: No randomness, ensuring deterministic output.
        Collision Handling:
While Base62 encoding itself is collision-free
(since each ID maps to a unique string), I implemented additional safeguards:
