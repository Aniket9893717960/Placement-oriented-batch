      1. Why Functions? The Reasoning Behind Their Role
Imagine U have a washing machine at home: whenever clothes get dirty,
u use the same process - load, add soap, set timer, wash, done!
You don't need to think about each step every time.
In programming, functions are like washing machines - they bundle a set
of actions together and let u use (or "call") them anytime.

 i. Why did Dart include functions?
 *To make code reusable (no repeating yourself).
 *To organize logic into "chunks" - each with a specific job.
 *To keep code cleaner and easier to read, fix, and share.

               2. Anatomy of a Dart function
 Every Dart Function has these parts:
  *Name (what do u call it?)
  *Parameters (what info does it need?)
  *return type (does it give something back?)
  *Body (the steps it performs)
 Example: "int add(int a,int b){ return a+b; }"
  *int: declares that this function returns an integer.
  *add: the function's name.
  *'int a, int b': asks for two numbers when called.
  *'{ return a+b; }': tells Dart to add and return the result.

 i. Why return types?
 Dart uses them so the computer (and you!) can predict what result will 
 come back - catching mistakes early and making programs safer.

              3. How to Call and Use Functions
When the washing machine is ready, u "call" it every time the 
clothes are dirty. 'Same in Dart!'.
