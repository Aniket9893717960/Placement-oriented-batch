Now that we have learned how to create an 'object' in Javascript,
we should also learn how to access data from an object.
To access the value of a particular key in an object, we typically
use two notations :
                       i.  Dot Notations
                      -------------------
In Javascript is a way to access properties or methods of an object using
a dot(.) followed by the property or method name.
Example : Find create an object person with name and age as it's properties
          and a message as it's method.
                   const person = {
                   name = 'Mayank',
                   age = 21,
                   message : function() {
                   console.log('Helloooooooooo!');
                   }
                  };
         let myName = person.name;           // Mayank
         let myAge = person.age;           // 21
         let message = person.message();        // Hellooooo!

                      ii. Bracket Notation
                      --------------------
In Javascript is another way to access properties or methods of an object
square breackets ([]) with the property or method name enclosed within 
them.
                    const person = {
                      name : 'Mayank',
                      age : 21,
                      message : function() {
                      console.log('Helloooooo!');
                      }
                    };
                    let myName = person["name"];
                    let myAge = person["age"];
                    let message = person["message"]();

                    /* Output :
                    Mayank
                    21
                    Hellooooooo!
                    */

                    Dot Notation V/S Bracket Notation
                    ----------------------------------
You most be thinking that why two different ways to access the properties
what is the different, and which one is more convenient?.
The answer is "we cannot use 'Dot Notation' when the property name or 
method of an object contains special characters, space or starts with a
number".
Example :                  const person = {
                                    "name" : 'Mayank',
                                    "lage" : 21,
                                };
                  let myName = person["name"];
                  let myAge = person["lage"];

                  /* Output :
                  Mayank
                  21
                  */

If we use 'Dot Notation' for the above example we get...
                 const person = {
                   "name" : "Mayank",
                   "lage" : 21,
                  }
                 let myName = person.name;
                 let myAge = person.lage;

                    /* Output :
                                  ERROR
                    */
              --------------------NOTE----------------
Mostly, we will be using the Dot Notation only in our programs but 'Bracket Notation' is one of the most important tools which we shouldn't forget as it has specific uses and can be life saviour in interviews.
                 ---------------X------------
                   Modifying objects and its properties
                   ------------------------------------
when it's comes to objects in javascript, we gain access to numerous features.
One of the most powerful capabilities is that we can easitly add, delete 
or modify properties within our objects at any time and in anu place within our 
code.

                           Adding Property
                          -----------------
Let's suppose we have a person object and we have only two existing properties
firstName and age. Now, we want to add lastName and isRunning as the properties of
the person object we can do this by assigning values to these new properties as :
                         const person = {
                            firstName : "Mayank",
                            age : 21
                           };
                      person.lastName = "Pandey";
                      person.isRunning = false;

                           console.log(person);
                      /* Output :
            {firstName: 'Mayank', age: 21, lastName: 'Pandey', isRunning: false}
                        */

                          Deleting the properties
                          -----------------------
Deleting the existing property in javascript is an easy as adding, we just need 
to use the 'delete' keyword. Here is an example:
                         const person = {
                            firstName : "Mayank",
                            age : 21
                            lastName : "Pandey",
                            isRunning : false
                           };
                           console.log(person);
                      /* Output :
            {firstName: 'Mayank', age: 21, lastName: 'Pandey', isRunning: false}
                        */
                        delete person.isRunning;
                        console.log(person);
                      /* Output :
            {firstName: 'Mayank', age: 21, lastName: 'Pandey'}
                        */

                          Changing values of properties
                          -----------------------------
we can modify a property in javascript object by simply assinging a new values to
it. Here's an example:
                         const person = {
                            firstName : "Mayank",
                            age : 21
                            lastName : "Pandey",
                         };
                         person.firstName = "Love";
                         person.lastName = "Babbar";
                         person.age = 24;

                        console.log(person);

                       Object Cloning
                       --------------
In javascript is a task primarily used when we want to duplicate an object's
structure and values without diresctly referencing the original object.

This is usedful when we need to modigy or manipulate the duplicated object independenlt from the original.

we have three ways to clone objects in Javascript:
        i. Iteration
        ------------
The most simple way to clone an object is using an iteration method. 
Cloning an object through iteration involves creating a new object 
and copying each property of the original object into new one using a 
loop or iteration mechanism such as 'for in' loop.
Example:                const person = {
                              firstName : "Mayank",
                              age : 21,
                              lastName : "Pandey",
                            }
                    let newPerson = {};
                    console.log(newPerson);      //{}

                        for(let key in person){
                              newPerson[key] = person[key];
                            }
                    console.log(newPerson);
                    // Output : { firstName: 'Mayank',
                                        age: 21,
                                        lastName: 'Pandey' }

        ii. Assign method
        -----------------
In Javascript, the 'Object.assign()' method is used to copy the values of
all enumerables own properties from one or more sources objects to a 
target object.
It returns the target object after copying the properties.\

        'Objects.assign(target, source1, source2,   ....sources);'

target : The target object to which the properties will be copied.
         This object will be modified and returned.

sources : One or more source objects from which the properties will be
          copied to the target object.

Example :
             const person = {
                   name : 'Mayank',
                    age : 21
                  };
          const clonedPerson = Object.assign({}, person);
                    console.log(clonedPerson);
          // Output : {name : 'Mayank',age: 21}

       iii. Spread Operator
       --------------------
The quickest way to create a clone of an object is to use 
spread operator.
The spread operator can be used for shallow object cloning.
Here's how we can clone an object using the spread operator:
                    const person = {
                              name : 'Mayank',
                              age: 21
                            };
                    const clonedPerson = {... person};
                    console.log(clonedPerson);
          //Output : { name: 'Mayank', age: 21}
                     ----------------NOTE----------------
It's important to note that spread operator method performs a swallow copy,
meaning it only copies the properties at the top level of the object.
If the object contains nested objects,they will be referenced rather than
cloned. For deep cloning, we need to use other techniques.
                    --------------X-----------
