Now let's see how do you set the mapping? The thing is, if you talk about
servlet and if you are using a external Tomcat, see, in this application
we are using a embedded Tomcat.

If you are using external tomcat, you can do more confifuration. Example,
in the earlier days, If you wanna do the configuration, we used to use XML.
So, the file name is web.xml , in this you do the mapping.

You specify the URL and you specify the servlet. So, u say, "Hey,Tomcat
whenever someone requests for this URL, execute the servlet." Any you can 
mention multiple servers there, that was one approach.

But then we wanted to more to the annotation way. In the annotation way,
what you do is you on the top of your servlet, we use '@WebServlet'.

"This is the annotation which we use. And in the bracket you mention
for which request you want to work with. So, you want to work with
hello request."
CODE IN 'HelloServlet'.
       package org.aniket;
       import jakarta.servlet.http.HttpServlet;
       import jakarta.servlet.http.HttpServletRequest;
       import jakarta.servlet.http.HttpServletResponse;
         @WebServlet("/hello")
       public class HelloServlet extends HttpServlet {
           public void service(HttpServletRequest req, HttpServletResponse res){
               System.out.println("In Service");
           }
       }

So, what it means is whenever someone request for hello, you have to call
'HelloServlet' this is how basically we should do in the annotation way.
But it works when you are using external Tomcat, when you're using 
embedded Tomcat, we have to do the confession by ourself here.

Now if u're thinking,
"Hey, we are doing so much of work just to map here, and then" of course,
there will be multiple lines of code here just for the mapping. But if
to understand this, we are moving towards Spring Boot.

All these things will be much easier in Spring Boot, okay? So, all these
things which we are doing here will be done by Spring Boot.

Okay, I knoe you're waiting for it. But let's get the hard part done so 
that we can focus on the easy part.
And when i talk about Easy part, you will know what is happening behind 
the scene, right?

okay? so let's do the mapping now to do the mapping, we need to get the 
hold on the context object. And to do that, i will simply create object
of context here.

So, I will say context, which  belongs to this package, make sure that
you are using the same package. 
CODE in 'App.java'.
         Context context = tomcat.addContext("","");

.addContext("",""): In which this method have two parameters.
 i. Application name: Now since we are working with same application,
                      I want to go for default, which is by double codes.
And then you have to mention your directory.
Now we don't want to create a new directory structure. So, i will say nul
here , okay? So, we are keep it empty for the default, And if we don't
want to create a new directory structure.
CODE in 'App.java'.
         Context context = tomcat.addContext("","null");

So, we'll keep it null, what next? Now once we got the hold on the 
context object, now i can use a method called 'addServlet', Which is a
static method belongs to Tomcat class.

So, I can use this method called 'addServlet'. And in this Servlet, you 
can do the mappring now. Now in this method you specify the name for the
servlet.

So, the first parameter is a name for the servlet. we say 'Hello Servlet'
And then you mention which class, in fact you have to pass the object here. So the class is 'HelloServlet'. So, maybe it's kind of creating a 
new object.

But you have to also pass one more parameter here, which is your context.
Next is a servlet name, and the next one is the object for the servlet.
CODE in 'App.java'
    Tomcat.addServlet(context, "HelloServlet", nre HelloServlet());

So, which servlet we are working with? We work with 'HttpServlet' we 
have to get the object for that. So, 3 parameters, the context, the name
of a servlet and then the object.

Now once we added the servlet, now let's do the actual mapping. So the 
way you where you can do the 'mapping' at the name of 
'Context.addServletMapping'.
So, the earlier method mapping is duplicated now
