Now u just talk about "Constructor Injection".
In java if u want to create the object or if u want to initialize the values
we can do that in constructor as well.
And most of the time we do that if u want to create the object or if u want 
to want to initialize the value.

we can do that in constructor as well And most of the time we do that
most of the time when we assign the value and the object is created
we prefer to use constructor.

setter's are good but when u want to assign the values latter setter make 
sense But if u want to assign the value as u can create the object u can
use constructor.

Ok so, how do i do that for example let's say we do have the constructor here
which is the default constructor. But let's say if i have the parameterized
constructor.
  public Alien(int age){
     this.age = age;
  }

  SO, this is i want to assign the value. I don't want to use the property
Tag now so, when i use property tag so, basically it uses the setter but
i don't want to do that i want to use the constructor.
Now how u want to assign the value with the help of constructor.
  The way u cando it is with the help of "<constructor-arg />"
And here u can assign the value directly we can say 'value' is '21'
  Now the differece between the previous one and this one is before
we using property and here we use 'constructor-arg'.

<bean id="alien" class="org.aniket.Alien">
        <constructor-arg value="21" />
<!--        <property name="age" value="21"></property>-->
        <property name="lap" ref="lap"></property>
    </bean>

If u want to even prove that the constructor is getting call 
i will say "Para Constructor Called".
Just to show u that this is how constructor is getting called
We don't want to call the default constructor now I want to call
the parameterized one.

It just not saying the para constructor is created That means this
particular constructor is getting invoked because in the property file
or in the xml file we want to maintoin that we want to use the 
constructor argument with value "21".

      <constructor-arg value="21">

It's working properly result we are properly inject the value.
But we have certain concerns here what if we have the constructor
which have 2 parameters.
i. we are passing only one now what if we have 2. 
            public Alien(int age, Laptop lap) {
               this.age = age;
               this.lap = lap;
            }
but we have only one in 'spring.xml' bean property And we got an error
which is expected name 
"Unsatisfied dependency expressed through constructor parameter"
 So, we write certain changes in 'spring.xml' given below.

<bean id="alien" class="org.aniket.Alien">
        <constructor-arg value="21" />
        <constructor-arg ref="lap"/>
</bean>

It run perfecly.
              -------------NOTE----------
What u think weare passing 2 values which are perfecly make sense but
how exactly it knows that "value=21" in 'constructor-arg' will go to
'age' and 'lap'(spring.xml) will go to 'lap'(Alien.java).
We don't maintoined even the name there how exactly he knows that the 
'21' willgo to 1st variable and 'lap' will go to 2nd object.

So, that's where it checking for the type 1st for the 'value'it should be
primitive and 'ref' which will go for the laptop. And things are working out that way.
But is it just verify there by excanging the value And now we got an error.
            -----------X---------------
But when we run program it gives error name 
'Could not convert value of type laptop to int' So, what was happening
here is He is not checking the type he is checking the sequence.
The firt variable shoukd go to the first location.
Which is the 'age' and second one is 'lap' this 2 are not matching.

<bean id="alien" class="org.aniket.Alien">
          <constructor-arg ref="lap"/>
          <constructor-arg value="21" />
</bean>

How do we solve this two ways to solve is
1. u will literally maintoined the type here
       'com.telusko.Laptop'
and second one is of type int.
         'int'
         <bean id="alien" class="org.aniket.Alien">
             <constructor-arg type="com.telusko.Laptop" ref="lap"/>
             <constructor-arg type="int" value="21" />
         </bean>

There is one solution when u maintoin the type when u know that there
are two type of variables 1 is of type int 2. is of type laptop now
it will look for the types or the sequence but when u maintoin the type 
it will go for the type.
But u know we have one more issue here We Explain with example:

i. what if we have one more variable in 'Alien' is 
            private int salary;
Now what if u have 2 constructor which have same integer now in that 
case there will be again a word of confusion.
Confuction is in 'spring.xml' we have two 'int' type and if we 
write '21' so, confusion is  '21' is 'age' or 'salary'. 
CODE
             <bean id="alien" class="org.aniket.Alien">
               <constructor-arg type="com.telusko.Laptop" ref="lap"/>
               <constructor-arg type="int" value="21" />
             </bean>
So, this work when u have both the variables of different type
or this should not be related to even inheritance concept U
say 
'Hey we got a laptop and the super class is computer then u differ
know that those are same.'

Because laptop extend the proper class so, that make sure it should
not created. This know when they are of different type of data.
So, how do we solve this problem then
we commit 
      "<bean id="alien" class="org.aniket.Alien">
               <constructor-arg type="com.telusko.Laptop" ref="lap"/>
               <constructor-arg type="int" value="21" />
        </bean>"
section then.

2. The solution is instead of using type u can actually specify the
index no. is specify the sequence again ok just say this is for 
the index one.
CODE
        <constructor-arg index="1" ref="lap"/>
        <constructor-arg index="0" value="21" />

Now even if u have two int variables there will not be initial now
u have to specify the index no. So, let's say if u have 'salary'
we say 'int sal' in parameterized constructor of 'Alien'.
SO, this solve one problem.
