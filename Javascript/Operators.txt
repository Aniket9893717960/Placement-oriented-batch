First we have to understand
                           What is operators?
This is something related to Operations.
There are specific symbols which used to perform
Specific Operations.
Just like            '+' used to perform Addition
                     '-' used to perform Subtration
                     '*' used to perform Multiplication
                     '/' used to perform Division

                            TYpes of OPerators
                           --------------------
         i. Arithmetic Operator
         ----------------------
In Arithmetic Operator we have the following kind of 
Operators available are as follows :
+ - * / %  **
            |-> Power Sign
++  --
In this we have two type of operator 
    a. unary operator         
                     It's a single Operand.
               ++  --
Pre Increment<-|
--- ---------    First increment than use
                ------------note------------
        Issue : if var b = true;
                  b++;     // It doesn't possible in arthmetic operator it only possible in 'Conditional operation'
        Issue : If var a = 11;
                  ++(--a)   // unary operator k nesting nahi kar sakta.
        Issue : if var a = 11;
                    11++     // It doesn't possible because it works with 'character values'.
        U have to remind that 
                  var a = 'A';
                  A++;       // It works because 'Unary operator' works with 'Ascii value'.
PostIncrement<-|
-------------    Use than increment
             This two operators are used as Pre & post.
       Example:
               ++a;
    b. binary operator
    + - * / %  **
            |  |-> Power Sign
            |-> It provides Remainder always
               Example of Power Symbol
                          -----
                              2**4 ->  2^4
                                    |-> Means in Mathomatics

      ii. Assignment Operator
          ----------  -------
i was talk a simple thing that
            let  a = 5;
             |     |  |-> It represent 'termination'.
             |-> let is used to create a variable.
                   |-> Assignment operator.
It will have more arithmetic assignment operators like :
        +=  -=  *=  /= **= %=
  +=  Is the Addition Assignment Operator adds a value to a variable
 ----
  -=  Is the Subtraction Assignment Operator subtracts a value from a variable
 ----
  *=  Is the Multiplication Assignment Operator multiplies a variable.
 ----
  /=  Is the Division Assignment Operator divides a variable
 ----

       iii. Comparison Operator
            ---------- --------
Comparison operators are used in logical statements 
to determine equality or difference between variables or values.

It's always being any one of this two options are 'True/False'.
Example :
              'console.log(10>5);'

                  Javascript Provide 3 Different Equality Operator
                 --------------------------------------------------
    a. Strict Equality
      -------- --------
compares two values for equality. Neither value is implicitly 
converted to some other value before being compared. 
If the values have different types, the values are considered unequal.
Example :
---------
    const num = 0;
    const obj = new String("0");
    const str = "0";
    console.log(num === num); // true
    console.log(obj === obj); // true
    console.log(str === str); // true
    console.log(num === obj); // false
    console.log(num === str); // false
    console.log(obj === str); // false
    console.log(null === undefined); // false
    console.log(obj === null); // false
    console.log(obj === undefined); // false
   
   b. Loose Equalty
      ----- --------
Is symmetric: A == B always has identical semantics to
B == A for any values of A and B (except for the order 
of applied conversions)

        iv.  Logical Operator
             ------- --------
Logical operators are used to determine the logic between variables or values.
Given that x = 6 and y = 3, the table below explains the logical operators:

Operator	Description	Example	
&&	        and	     (x < 10 && y > 1) is true	
||	        or	     (x == 5 || y == 5) is false	
!	          not	      !(x == y) is true

     Here It comes a Concept called Falsey and Truthey
    --------------------------------------------------
If your work with the the logicates like 
    '&&'   '||'   '!'
It's Essentially work on two type of values.
a.  Falsey
    ------ It covers up many data types like
           Undefined, null, 0(Zero), false,
           NaN, String.
b.  Truthy
    ------ any thing which is not falsey.

This concept is very useful in the upcoming concept called
                   Short - Circuiting
                   -------------------
Example :In logical OR If any value will
-------   return 'true'(Finds 'First Truthy Value') 
then at point the value is terminated.
It doesn't check more condition at that 
single line.
           SAME AS
           -------
If logical AND finds First Falsey value 
then at point the cammand will stoped 
Processing return answer.
