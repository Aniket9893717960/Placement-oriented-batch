Now let's work with 'OneToMany' So, what i want to do now is
As an 'Alien' we have 'Laptop' we got one here.
  When u say multiple we have to provide the 'list' of laptop.
And we also input the package of 'list'.
Now we will change this to 'laptops' not 'laptop'

                   import java.util.List;
                    @OneToMany
                  private List<Laptop> laptops;

Then we have to make changes in ' Getter's And Setter's '
And 'toString'as well
Now the problem is in 'main.java'. 
               a1.setLaptop(l1);
Gives error because we doesn't have a single 'laptop' we have the
list of laptop i can't pass one. And since we only have one laptop
here. 
Either we can say list or 
              a1.setLaptops(Array.asList(l1,l2));

and Create the object of 'Laptop' class name 'l2' and pass the data
('3','Lenovo','LOQ','12') and set this data into 'laptop'.
Now at downer 'Session'. we add below command.
                      session.persist(l2);

In the 'Main.java' program.

package org.aniketdb1;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.Arrays;

// we start work on this main From Video no 139

public class Main {
    public static void main(String args[]){

        Laptop l1 = new Laptop();
        l1.setLid(2);
        l1.setBrand("Dell");
        l1.setModel("XPS");
        l1.setRam(16);

        Laptop l2 = new Laptop();
        l1.setLid(3);
        l1.setBrand("Lenovo");
        l1.setModel("LOQ");
        l1.setRam(12);

        Alien a1 = new Alien();
        a1.setAid(101);
        a1.setAname("Navin");
        a1.setTech("Java");
        a1.setLaptop(Arrays.asList(l1,l2));

        SessionFactory sf = new Configuration()
                .addAnnotatedClass(org.aniketdb1.Alien.class)
                .addAnnotatedClass(org.aniketdb1.Laptop.class)
                .configure()
                .buildSessionFactory();

        Session session = sf.openSession();


        Transaction tx = session.beginTransaction();

        session.persist(l1);
        session.persist(l2);
        session.persist(a1);

        Alien a2 = session.get(Alien.class, 101);
        System.out.print(a2);

        tx.commit();
        session.close();
        sf.close();

    }
}


In 'ManyToOne' what we can do is 
                        In 'Laptop.java' we use 
                        'private Alien alien' command. 
For this 'Alien' reference i need the ' Getter's And Setter's ' 
Now we have done the only thing is to make is the
'laptop' should use this command.
                         l1.setAlien(a1);
                         l2.setAlien(a1);

Now if we run the command then we got an error name
'could not determine recormmended  JdbcType for Java type  
         'com.aniketdb1.Alien' '

So, when u referel the 'Alien' inside 'laptop' u have to maintoin
that which relationship is happening here.
So, from the laptop prospecive it's 'ManyToOne'.
