Before starting with spring boot we have to learn one concept which
is 'loc' and 'Di'.
I know this is short forms but full form of this is 
'Inversion of Control' and 'Dependency Injection'.

Of course there are two different concept.
Let's talk about 'loc' which is 'Inversion of Control' it simply 
means that u are inverting the control but where what control u
are inverting So, as a programmer u have multiple roles.

when u write a code make sure u create the "Object" or
flow of the application. 
Now u say what's wrong with that 
And i will say "I Ok with the flow of the application but 
i not ok with the object creation".

Now u say in the start and end of the entire java we talk about
object creation and we do that with the help of new keyword.
the thing is object creation is easy 
  'of course u can write a new keyword and u get the password.'

But if u can create the object it's your responsibility to 
  'Create the object'
  'Maintain the object'
  'Destroy the object'
basically as a programmer u are controlling everything.
And that's what the problem start when u try to manage all
the things.
U are focusing all the things but u are not focusing the main
thing Which is "Business Logic".

Every application is different and what make it different is 
business logic. So, your focus is on the business logic
Not on the object creation.
So, u want that some one else will control the object creation.
That means u are inverting the control.

Earlier u have the control but now u are giving the control
to some one else that is inversion of control it does not for 
the object but for the flow.

Now to achieve this in 'Spring' we have something called
"IOC Container".
 -------------
So, 'Spring' works with container where u put all the objects
Now when i say u not create the object i mean as a programmer.
Will some one else can do that that's your spring framwork.

'spring' will create object for u. when u can keep it 
so, in side the 'IOC' container u will be having your 
objects and who will create it is your spring framwork.

And that's your 'spring ioc' and the container name is IOC 
container.

    |--------------------------------|
    |   |------------------------|   |
    |   |      (IoC)Container    |   |
    |   |  --      --      --    |   |
    |   |  ob1     ob2     ob3   |   |
    |   |------------------------|   |
    |--------------------------------|

So, 'IOC' is the principle u have to follow to achieve it
But how exacly u make it work and that's where we have to 
use Design pattern called 'Dependency Injection'.

That u have the object's there but some one have to inject them
to your application right.
Let's say u want to create a laptop class and this laptop is 
basically dependent on the CPU.

Of course u can not run a laptop or cannot use a laptop without
CPU. Imagine if you have two different classes.
    1 is laptop           2nd is CPU
Now inside the laptop class u need the CPU object.
So, basically both this object are available inside the container.
But how will u link them. How will u inject the CPU object inside 
the laptop.

And that's where we use the object called 'Dependency injection'.
How we can done this in spring we can think it on latter.
But using spring it's just not creating the object but also 
injecting that into your application.
