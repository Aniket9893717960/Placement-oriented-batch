The thing is we are started with spring boot But the actual sense and
what happends behind the seen make much more sense once we do this in 
spring framework.
Why we are doing in spring boot is just to understand what spring boot
can do In term of "Dependency Injection" of course 'Spring Boot' can
do allot of different things .

But we are starting with the first step ok so first i say what we gonna 
do here Before that we have one more update we are using 'java 21' instead
of 'Java 17'.

package com.telusko.app;

import ...

@SpringBootApplication
public class SpringBootDemoApplication {
   public static void main(String[] args){
    SpringApplication.run(SpringBootDemoApplication.class, args);
    System.out.println("Hello world");
   }
}

So, what we arer doing in 'SpringBootDemoApplication.java' we using
'SpringApplication.run' basically it activates your spring framework
It also has something called 'container' where u can contain your
  spring Beans.
As i maintoined before 'Spring' is responsible to create the objects
And this object is basically called 'Beans'.
So, any objects is created and manage by spring are called 'Beans'
Nothing feancy it's just normal object different name.

So, this is how u run the container but we are not using container 
in this code we just simply running "Hello World". So, Nothing about
Container's tail now.

                      Now i Use Container
                      -------------------
Now we will create a simple class in 'com.telusko.app' let's say
i want to write 'Alien' If u are not sure why u create or work with 
'Alien' besically i believe that programmers are 'Aliens' because
we don't leave in this world "Mentally" or "Virtually" we leave in
"Virtual" World right So, we are 'Aliens'.

'First' of all i wonna deactivate my "mitup" Copilate.
I wanna declare a simple method here name 'Alien'.
with the method
  CODE
    public void code(){
           System.out.println("Coding");
    }
Now In main class "SpingBootDemoApplication" i will create an object of
'Alien' And we simply called 'Code'.
CODE
  package com.telusko.app;

import ...

@SpringBootApplication
public class SpringBootDemoApplication {
   public static void main(String[] args){
    SpringApplication.run(SpringBootDemoApplication.class, args);
    Alien obj = new Alien()
    obj.code();
   }
}

Because we know 'Code' is a non static method that's why 'Alien'
Object.
But my idea is If i don't want to create the object I want 
Spring To Create the object.

And that's tricky Right If u don't say 'new' Alien And 
Now u are saying u want the object from Spring.
How spring will know that u want to create the object For that
U will do is "Where exactly it will create the object?"

The Answer of this Question is inside the container remember i 
maintoied about the 'Containers'. So, imagine u have the JVM And 
JVM inside the 'Container' u have special area inside the box Which
is your 'Container'.

If Every time Your spring Framwork which will create an object for u
it will be available in the container That means u have to find the way
to get the container The way u can do that with the help of 
"Application Context".
The Thing is If u check below perticular method.
CODE
   SpringApplication.run(SpringBootApplication.class, args);

And If u go to 'run' method. 'run' returns the 
'ConfigurationApplicationContext' extends 'ApplicationContext'
that means if u can simply use 'run' method. Returns the 'run'
value u got the 'Configuartion context Object'.

Now we can initialize 'ApplicationContext' with above code.
CODE
   ApplicationContext context = SpringApplication.run(SpringBootApplication.class, args);

Now u have a way to communicate with IOC container now how do we
communicate Now we simply say 
"Hey Context give me the container" And Remember Object is not
the object in 'spring' it's 'Bean' in 'Spring' framwork.

And here we say 'getBean' And here u also maintoined Which class 
Object u want.of course u have to maintoined because in your project
u maight have multiple classes.
Then how will your Spring Framwork Know how u want Say
'Hey Alien We want the object which u have created inside the container.'
   CODE
   Alien obj = context.getBean(Alien.class);

          --------------X-------------------
In This we are Expecting  "Alien will have the object which he created"
Your Spring framowrk will say ok
U basically need this "Alien.class" object Or u need the object of this
class But the IOC container will able to give u an object only if the object is there in the container.
we are assuming it will be there but is it let's try 
let's re run this and see what this it says
          "No such bean Defination:
   No qualifying bean of type 'com.telusko.app.Alien' available"
So, basically It's not able find In this 'Bean'
         -------------X-----------------
But u say why we are using the Spring framework when it not create an 
object for us. Actually it can but the only thing is
Imaging the case where u have 100's of object in your project and Is u want Spring will create all the object's for u.
Of course not right SO, there is way u need to tail which object u want
And which u not want. So, Spring by default says i will create all the 
object for u only when u maintoined that u want the object then i will 
create.

So, how did u say 'springboot' thet i want the object FOr this we use 
'Annotations'.
Here in 'Alien.java' class we use 'Component' annotation top of the 
class.

By using 'Component' annotation u make sure that spring has to manage 
The demanding class.
So, 'Create the object' 'Assemble the object' and 'Manage it' will be 
done by 'Compnonent Annotation'.

This is the Final Program i. Main.java
  package com.telusko.app;

import ...

@SpringBootApplication
public class SpringBootDemoApplication {
   public static void main(String[] args){
    SpringApplication.run(SpringBootDemoApplication.class, args);
    Alien obj = new Alien()
    obj.code();
     Alien obj1 = new Alien()
    obj1.code();
   }
}

2nd is Alien.java
  package com.telusko.app;
  import org.springframwork.sterotype.Component;
@Component
public class Alien {
  public void code(){
    System.out.println("Coding");
  }
}
                ------------NOTE----------
If we create one more object of 'Alien' it will work without Any Error 
But the Question is It's we getting the same object or we getting 
different object.
               --------------X------------
