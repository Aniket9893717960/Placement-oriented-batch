The First Question is Why do we need Map?
So, the thing is when you work with list let's say we have list of values
The values are 56  23  67  92
We have this values and let's say we have the 'ArrayList' here
So, basically you have to work with index's zero123 But Some times
It's better to have a name For the different kind of index instead of heaving
'0123' let's we talk about phone book which will have the 'Name' and 'Number'

Example:
        we have to pro ject Name as index and it's Marks in inner digit 
This will not Possible in 'List' But it's possible in 
             Key And Value Pair
Example :
         Key     Value
        Navin    56
        Harsh    23
        Shushi   67
        Kiran    92
And we can Achieve this two things in one DataType or DataStructure
Which Is 'Map'.
                      MAP Interface
                      --- ---------
So, The 'Map' Is the collection of Key and Value Pairs So, how do we
achive that.
Map itself is an Interface which Contains two Parameter 'Key' and
'Value'.
Now if we talk about 'Arraylist' So, this have Either because It's
Represent Elements.
In 'public interface Map<K, V>' in which 'K' represent 'key' and
'V' represent Values. So, this 'k' ant 'V' will be replaced with
Datatype like 'integer', 'Float', 'String' or what ever you work 
with.
So, you have to look class which implement this
          'Map<String,Integer> students = new HashMap<>();'
                 |-> In this you should have Disclose the type of it
                      Is Necessary.
In MAP : To add a method u have to use method name 'put'
          At which you have to pass two Parameter.
like :       'students.put("Navin",56);'
                       ------------NOTE----------
*In 'List' to access any value we are using 'index' But in
  'Map' we have the logical Link to it.
                    ----------X---------
At last we just use 'System.out.print' to print the 'MAP' itself.
The Implementation of whole Program looks like :

import java.util.Map;
class Demo {
      public static void main(String args[]){
           Map<String,Integer> students = new HashMap<>();

           students.put("Navin",56);
           students.put("Harsh",23);
           students.put("Sushil",67);
           students.put("Kiran",56);
                                                      //OUTPUT
           System.out.println(students);   //{Navin=56, Sushil=67, Kiran=92, Harsh=23}
        }
     }
                   ----------NOTE------
You Noticed That Even 'Set' Doesn't following the Sequence like 'Map'
                    --------X-------
To access the Data of 'Map' we have 'get' method
                                    -----   Example:
            System.out.println(students.get("Harsh"));

    We also Update the Data in 'Map' How we Done this Explain with Program
   -------------------------------------------------------------------------
import java.util.Map;
class Demo {
      public static void main(String args[]){
           Map<String,Integer> students = new HashMap<>();

           students.put("Navin",56);
           students.put("Harsh",23);
           students.put("Sushil",67);
           students.put("Kiran",56);
           students.put("Harsh",45);
                                                      //OUTPUT
           System.out.println(students);   //{Navin=56, Sushil=67, Kiran=92, Harsh=45}
        }
     }
                        -----NOTE-----
In this Program you also notice that 'Harsh' will not repeat twice but it 
replace the Previous data/value of 'Harsh' because here 'Harsh' will work as
a 'key'.
          It's Right to say that 'Keys' are actually a 'Set' Yes
           Because in this Values Doesn't Repeat twice.
Also "{Navin=56, Sushil=67, Kiran=92, Harsh=45}" Output have doesn't
any Sequence it's also similarity of 'Map' with 'Set'.
                         ------X------
Now i want to print all the values But One By One I don't want 
my Words complicated i want to use 'For' loop here.
But the Problem is we doesn't have the Single value.

           So, i want a method which will give me all the keys
        Is there any method we have Yes, we have the method name 
          Called 'Key Set'Which return 'String' in this case.
           Example:
                   'System.out.println(students.keySet());'
                                  // OUTPUT : [Navin, Sushil, Kiran, Harsh] 

This 'keyset' method will give me all the Keys of Data.
Example :
          for(String key : students.keySet())
                System.out.println(key + " : " + student.get(key));

Then After Running this code we got.
            Navin : 56
            Sushil : 67
            Kiran : 92
            Harsh : 45
So, that's how we got all the values from 'Map'.
Yes, we are using 'put' method here because when we say add
any 'New' Element to add the element if you already have the 'key'
not add it just replace it That's 'Put' method.

                 Apart from this we have some more method To Explore
                 ---------------------------------------------------
i. remove : to remove Particular element or Particular
            Entry take object(key) as parameter
ii. get: To get all the value use object as parameter.
iii. values : values method gives all the values just like keys give all the
              keys.

                Also Apart From 'HashMap' we use 'HashTable' And
                 Both works all most same. So, what's the difference
               Between 'Hashtable' and 'HashMap'
              --------------------------------------------------------
Unlike the new collection implementation, {@code Hashtable} is 
synchronized
                   ----------NOTE------------
It depends upon which you want to use if you  a
synchronized verion than you u used 'Hashtable'
if you want normal than you use 'HashMap'.

Remember we work with threads if the 'Multiple
Threads' working than you used 'Hashtable' to make
it synchronized.

But if we go to HashMaP then what we see
'If you want to work with multiple threads and
you still want to use 'hash map' then you use 
synchronized externally.'
                -------------X---------------
