In previous video we read the theory of collection Now let's start the 
implemenentation and of course this will make much more sense once we do
it.
If you talk about the collection we were talking about the 'collection'
interface Remember in last lecture we were talk about 'Collection API'
Which is the concept.

Now at this concept we have multiple classes and interfaces to work with
So, the first Interface we are Exploring here is 'Collection Interface'.

                # Collection Interface
                  --------------------
'Collection Interface' belongs to 'Java.util' package As we have noticed
most of the classes which we used in Previous lectures are belongs to
'Java.lang' package So, that's why we doesn't imported them But if we talk about collection interface it will belongs to 'java.util' Package.

when we talk about all the classes of 'Collection Interface' those will
belongs to this package.
But the Problem is we doesn't use 'new' keyword for calling 'Collection'
because it's an interface.
              There are some solution for this problem
i. Prepare your own method with your self.
ii. If you don't want create your own class let's we use some inner classes.
    and that's right we use so many inner classes to work with.
    Let's Extend it :
                        Collection Interface
                            |        - Some more Interface under this.
              -------------------------------------
              |                |                  |
            List             Queue               Set          -All This interfaces 
                                             will Extend the collection interface or 
        individually all this interfaces it's own implementation Example:

            List             Queue               Set 
             |                 |                  |
             |-> Array      This also             |-> HashSet
                 List       have different        |-> Linked HashSet
             |-> Linked     Classes Example:
                 List       Dequeue

Apart from this if we were talking about 'Collection API' we have one more thing
 to work with which is something called 'Map'
Map have multiple implementation which we learn when we start with map. 

             At this Point we can Start with either List and set but Let's
                start with Set:
             --------------------------------------------------------------
So, Instead of 'collection' we initialize 'collection Interface' with 
'ArrayList' like this:
                    Collection nams = new ArrayList();
Now we got collection 'nams' with 'new ArrayList' 

                      Now We Exploring Methords of 'ArrayList'
                      ----------------------------------------
We have some methods like 
                        add(Object e) // Boolean
                        addAll(Collection c) //boolean
                        contains(Object o)  //boolean
                        conatainsAll(Collection c) // boolean
                        equals(Object o)  // boolean
                        notify() //void
                        notifyAll()  //void
                        remove(Object o) //boolean                            
            toArray() // convert 'collection' to 'array' return type 'object'

So, Now we can add values For this we use add values:
                Collection nums - new ArrayList();
                             nums.add(6);  // Since it's a no to Ensure that
                                                ArrayList have only numbers.
  Build the Full flaget Program
  -----------------------------
                      import java.util.Collection;
                      import java.util.ArrayList;

                      public class Ts{
                             public static void main(String args[]){
                                 Collection nums = new ArrayList();
                                   nums.add(6);
                                   nums.add(5);
                                   nums.add(8);
                                   nums.add(2);
                                 System.out.print(nums);
                          }
                      }
                ------------------NOTE-----------------
If we run this Program we got a 'WARNING' name
'Note: Ts.java uses unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.'
because you’re using a raw type for Collection — meaning you didn’t specify what 
type of objects it will hold. Java warns you because this can lead to type-safety 
issues.
                        ---------------X------------
