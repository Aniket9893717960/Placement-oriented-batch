              1. Why Do We Need Packages And Libraries?
Imagune building a robot. u could start from scatch each time, but isn't
it smarter to use ready made wheels, sensors and chips someone else 
perfected? In programming, packages and libraries let developers share 
their best solutions- so u don't reinvent the wheel for for every project

                     Why Did Dart include them?
As apps grow, code gets complex. Dary's creators wanted a way to:
 *Divide programs into modules(organized chunks).
 *Reuse excellent Code Written by others.
 *Make large apps easier to build, fix, and upgrade.

             2. What is a Library? How Does Dart Use Them?
A library is a collection of related tools, types and functions like
a "toolbox". The Dart standard library includes helpers for math, text
, files, internet etc.
   i. How to use it? CODE:
 import 'dart:math';
 void main(){ print(sqrt(16)); // Uses math library! }

 ii. Why need imports? imports keep your code tidy - only tools u need 
 are loaded, boosting speed and clarity. Dart's libraries are carefully
 separated (math, async, io) for best organization.

          3. What is a Package? How Do Developers share Them?
A package in Dart is a bundle of code u can easily add to your own
project. There are open source packages for everything: animation,
networking, charts or connecting to databases.
 How to add? *Dart and Flutter projects use a 'pubspex.yaml' file to
              declare needed packages.
 *Packages are shared through pub.dev, Dart's official Library store.
 Sample:  
        dependencies: http: ^1.0.0
*This adds the http package, so your app can fetch data from the web.

   i. Why Packages? They empower u to solve huge problems quickly, using
 tested solutions from the Dart community, saving time and reducing 
 errors.

            4. Creating and using your Own Libararies
For bigger projects, divide your own code into custom libraries. For
example, group all "math helpers" or "user authentication logic"
together and import only what u need in each file.
  
  i. How to do? CODE: dart:
                 int triple(int x) => x*3;
  CODE:dart: //main.dart
  import 'math_helpers.dart';
  void main(){ print(triple(5)); //Uses your own library! }

  ii. Why? Promotes clarity: Each part of your code grows independently.
        Easy for teamwork, maintenance and scalability.

         5. Package Management: What Does pub do?
The pub tool handles packages:
 *installs and updates libraries from pub.dev.
 *keep your project libraries list organized and up to date.
 *Ensures everyone on your team uses the same versions, saving tons of
  headache.
        i. Why did Dart create pub?
 Developers shouldn't waste time installing code by hand. A smart package
 manager is now standard for all pro landuages, Dart's pub brings
 fast, reliable automation.

      6. The Package Ecosystem: Why is This Dart's Superpower?
Because Dart encourages sharing and modularity, there are thousands of
packages ready for use. This lets beginners and experts build powerful
apps with minimal effort - no need to "reinvent the wheel" with every
project.
 *Flutter, for example, couldn't exist without Dart's package/libraries
  approach. Every widget, animation, and extension is a library, making
 the ecosystem innovative and vast.
 *Dart's package system encorages learning and collaboation, so u can 
 borrow, learn from and contribute to community code.

                Summary Of Lecture 13:
*Libraries: Toolkits built into Dart or by the community, ready to reuse.
*Packages: Sharable Groups of libraries u can add instantly.
*Dart's package/libraries system is why Dart and Flutter apps scale easily
 ,stay organized, and evolve fast.
*Tools like 'pub' and 'pubspec.yaml' keep everything automatic and 
 professional.

Next: Iterables & Streams-how Dart lets u process big data flows 
      efficiently, making your apps fast and flexible. Ready to process
      data the smart way? Let's continue your Dart journey!
 Now that packages and libraries are clear, the next topic is essential
 for handling data and building reponsive, modern apps: Interables and 
 Streams. These let u work efficiently with lists of data and with 
 information that arrives over time, making professional apps possible!
