So, let's work with 'ManyToMany' Now to that Example we have to convert it
is So, first of all 'One' alien will got multiple laptop Instead of having 
'OneToMany' here we say 'ManyToMany' And Remove this 
"(mappedBy = 'alien')" as of now
                       This changes done on 'Alien' side

On the 'laptop' side we have to done changes because here
one laptop belongs to one 'Alien' So, in this case we build
the List of Aliens because a laptop can belongs to multiple 
'Alien' and import as well.
At upper we also say '@ManyToMany'.
            import java.util.List
            @ManyToMany
            private List<Alien> aliens;

And also re-create the 'Getter's and Setter's' for List of Aliens
And we not printing it in 'toString' so, doesn't change in 'toString'.

Now we come to main and here we can do some changes because
Now when u are setting an 'Alien' we are saying
          'a1.setLaptops(Arrays.asList(l1, l2));'

For 'Alien' we also doing the same thing but before i do that we create a 
one more laptop So, let say we got 3 laptop here
At 3rd we set the data name("3","Apple","Macbook",8).
So, we got 3 laptop And we also adding the data in 'Alien'.
("102","Harsh","Python"),("103","Kiran","AI").

The final Program of 'Main.java' will be

package org.aniketdb1;

import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

import java.util.Arrays;

// we start work on this main From Video no 139

public class Main {
    public static void main(String args[]){

        Laptop l1 = new Laptop();
        l1.setLid(2);
        l1.setBrand("Dell");
        l1.setModel("XPS");
        l1.setRam(16);

        Laptop l2 = new Laptop();
        l2.setLid(3);
        l2.setBrand("Lenovo");
        l2.setModel("LOQ");
        l2.setRam(12);


        Laptop l3 = new Laptop();
        l3.setLid(4);
        l3.setBrand("Apple");
        l3.setModel("Macbook");
        l3.setRam(16);

        Alien a1 = new Alien();
        a1.setAid(101);
        a1.setAname("Navin");
        a1.setTech("Java");

        Alien a2 = new Alien();
        a2.setAid(102);
        a2.setAname("Harsh");
        a2.setTech("Python");

        Alien a3 = new Alien();
        a3.setAid(103);
        a3.setAname("Kiran");
        a3.setTech("AI");

        a1.setLaptop(Arrays.asList(l1,l2));
        a2.setLaptop(Arrays.asList(l2,l3));
        a3.setLaptop(Arrays.asList(l1));

        l1.setAliens(Arrays.asList(a1,a3));
        l2.setAliens(Arrays.asList(a1,a2));
        l3.setAliens(Arrays.asList(a2));


        SessionFactory sf = new Configuration()
                .addAnnotatedClass(org.aniketdb1.Alien.class)
                .addAnnotatedClass(org.aniketdb1.Laptop.class)
                .configure()
                .buildSessionFactory();

        Session session = sf.openSession();


        Transaction tx = session.beginTransaction();

        session.persist(l1);
        session.persist(l2);
        session.persist(l3);

        session.persist(a1);
        session.persist(a2);
        session.persist(a3);

        Alien a5 = session.get(Alien.class, 101);
        System.out.print(a2);

        tx.commit();
        session.close();
        sf.close();

    }
}

But the problem is Mapping is done in 'alien_laptop' then why in this
database we got 'laptop_alien' any guess we incounter this problem
in the previous video.
The thing is both 'alien' and 'laptop' thinking it's there responsibility
to map it.And we need to tail them 
"Hey one of you will map it." but the question is from whom u want to be
maped with So, i want this time 'Alien' to map it.
Then, we have to stop 'laptop' to map it.
And wheter u can do that with the help of command.
                    @ManyToMany(mappedBy ="laptops")
And over job is done hopefully.
                So, yes it's run
