So, let's start our journey of creating a project with "Spring MVC + H2"
First we go to "SPRING INITIALIZER".
i. write the project build tool is 'Maven'. 
ii. Language "Java".
iii. Spring Boot version '3.2.0'
iv. let's say group id is "com.telusko". let's set the 'ArtifactId' as
'SpringJDBCEx'.
v. 'Description' of this project is 
   "Demo project for Spring Boot and JDBC".
vi. 'Packaging' i stick to 'jar'.
vii. 'Version' i choose is '17'. Also suggest that u have to choose the
     lartest LTS version.
viii. Add Dependencies which we have required 
      a. We need Spring JDBC when we search for 'JDBC' we got 'JDBC Api'
         name.
      b. we have to add for Database So, we search for 'H2'.
ix. Then click on generate -> Unzip folder -> Open in intellij idea.

After all this things when we actually open the 'pom.xml' file
Now below is the dependencies which we added in 'SpringJDBCEx'.
CODE:
    <dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-jdbc</artifactId>
		</dependency>

		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

Now we need some things like
 i. we need a class which we are going to work with even before that 
    i will make sure that 'SpringjdbcExApplication' will run properly or
    not.

Now the Question is which kind of 'Entity' we are going to wrok with 
what we are trying to achieve here. So, the logic is not important we are
here to learn about spring, JDBC  and Spring Boot.
So, the logic is not important we are here to build the application for 
'Student' management.

let's say "adding student", "retrieving student","Delete Student" if u want SO, that's what we are doing here.
If u want the complex example then your welcome here just write whatever
code u want but conecpts are important so i focusing on them.

Ok so, first thing i want to done that i want to create the student class
. 'Student' will have certain things right Just like i wanted to say 
'Java Class' name 'Student'.
Now this 'Student' have the data in the database as well. so, normally
what happens u know when we create a table let's say if u want to store 
the data about 'Student'.

'Student' will have the table a rollNo, or a Martks if whatever u want to
go with but let's say 'roll.No','Name' and 'marks' we have this 3 fields
Now in those tables we have columns which have the 'column' name.
And also u will be having multiple role can u connect table with the 
class.

Basically u can say that your class have basically similar to tables
because class will have the class name and class will have certain 
variables.
If your class will have 3 columns. Your class will have 3 properties.
Right 1st is 'roll No','Name' and 'Marks'.

And every object of the class will be one row in your table. So, 
if u create 10 objects for students imagine u have 10 rows.
So, basically u can relate the class with the tables.
So, i want the class in my table is above one.
CODE:
package com.aniket.SpringJDBCEx;
public class Student {
    private int rollNo;
    private String Name;
    private int marks;
}

With this variables we also need 'getters' and 'Setters' for it.
So, i say generate 'Getters' and 'Setters' for all 3 variables.
then click on 'OK'.
CODE:
public int getRollNo() {
        return rollNo;
    }

    public void setRollNo(int rollNo) {
        this.rollNo = rollNo;
    }

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        Name = name;
    }

    public int getMarks() {
        return marks;
    }

    public void setMarks(int marks) {
        this.marks = marks;
    }

What if i also want to have a 2 string variables. I want to print the
object. So, click on 'Generate' then i want the two string method
for all this variables here.
CODE:
    @Override
    public String toString() {
        return "Student{" +
                "rollNo=" + rollNo +
                ", Name='" + Name + '\'' +
                ", marks=" + marks +
                '}';
    }

Now i want 'Student' will be managed by Spring framework and since we 
have talk about all those things. i will done quicker here and 
initialize '@Component' as well.
So, basically i make this object from the student class. For this
bean class. So, i can create the object i add the value and 
at last save the values in database.

But the problem is how exactly we can create those layers. There we 
have any configuration for 'H2' because when we add 'H2' then it have
some default stuff.
i. It will give you connection pooling with the help of Hikari.
ii. It will give u data source as well.
iii. It will give you default database which you can work with.
     And of course it will not give you table.

             Let's see how Do we create tables there
             And how do we create those layer?
So, basically to make it work what i am going to do is let's say i
want to store the student object.
               Student s = new Student();
You know one more thing. Let's follow the pattern where you store 
everything in a proper package.
So, let's say this belongs to a 'package'. which is already there
it will belongs to 'Model'.

So, u can see i moved service class to 'model' So, that means 
we have to import the package at 'SpringJdbcExApplication'
