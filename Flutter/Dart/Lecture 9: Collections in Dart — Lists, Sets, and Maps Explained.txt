        1. Why Collections? The Real Life Comparison
Imagine your're making a shopping list, gathering studentes'names, or
storing each student's scope with their name. Storing each item in a
separate variable (like 'item1','item2','item3') quickly gets messy!
Collections are special Dart features that let u:
 *Group data together (like having a box for all Apple fruits 
                       instead of one for each apple).
 *Organize, search, add or remove items easily.
 *Work with lists of unkown or changing length without needing more code.

 i. Why did Dart designers build collections? Because almost every real
    world  app - chart, banking, weather, games - is full of groups of 
    things.Collections let u write fast, flexible and organized code.

               2. Lists - The Ordered Rows
A list in Dart is a ordered group of items. Think of it as a row of 
lockers, each with a number: CODE:
   var numbers = [10, 20, 30];
   print(numbers[0]);    //prints 10 (first locker)
   numbers.add(40);     // Adds a new locker at the end

 i. Why Lists in Dart? Dart uses zero based indexing ('' for first)
              to keep things speedy and predicatable.
 You can add, remove and change items easily - perfect for tasks like
 storing shopping lists, scores or messages.

 ii. Why not just use arrays like in other languages?
 Dart's List is more powerful and flexible than a basic array.
 Lists can grow in size, hold any type of data and come with 
 lots of built-in helper tools.

               3. Sets - No Duplicates Allowed
A set is like a classroom attandance - each student's name appears only
once. CODE:
     var fruits = {'apple', 'banana', 'apple'};
     print(fruits);      //prints {apple, banana}

 i. Why Sets in Dart? Great for quickly checking if something is present
                      or not (fast loop up).
 *Perfect whenever duplicates Should Not be allowed (Unique usernames, 
   tags etc).
 ii. Why Did Dart include Sets? Some real world problems like ensuring
            unique values are messy with Lists. Sets solve these problems
        simply and safely.

               4. Maps The Name Tag Organizer
A Map is like a set of labeled boxes: each box holds a value.
Example: var studentScores = {'Amit':88 , 'Neha':90};
         print(studentScores['Amit']); //prints 88
 i. Why Maps in Dart?
 Maps are perfect when u need to look up info by name,ID or another 
 label (not just by position in a list).
 ii. Why Did Dart add Maps?
 In real-world problems , keys aren't always numbers they could be 
 usernames, email addresses or product codes! Maps solve this by letting 
 y link keys and values easily.

           5. Common Collection Operations And Why they Matter
*Add: 'numbers.add(99);'(add elements on the fly)
*Remove: 'numbers.remove(20);'
*search: 'numbers.contains(88);' or 'amit' in studentScores.
*Length: 'numbers.length' (handy for loops/validation)

 i. Why these Features? Working with changing or unpredictable data is 
         part ofevery app. Dart's collection helpers make code safer,
      less error prone and save you time.

            6. For Loops and Collections: The Power Combo
Collections are regularly used hand in hand with loops: CODE:
  for(var num in numbers){ print(num); }
  studentScores.forEach((key, value) {print('$Key scored $value');});

 i. Why this combo? It's efficient for displaying, processing or 
          transforming groups of data - an absolute necessity in
    real apps.

               7. Dart Collections are type Safe
If u declare: CODE:
       List<int> scores = [100, 99];
Dart checks that u only ever add integers, protecting u from bugs later.
  i. Why? Type safety means fewer hidden mistakes, and Dart can run
        code faster because it doesn't have to guess.

                    Summary Of Lecture 9
*Lists: Ordered, flexible for collections of any size.
*Sets: Unique, unordered, ideal when duplicates aren't wanted.
*Maps: key-value pairs, for when u want to "Look up by name."
*Dart's collections give u power, safety and flexibility inspired by
 real world needs and challenges.
