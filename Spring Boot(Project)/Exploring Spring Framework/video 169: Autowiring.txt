So, we have done with the interface creation right.
We got one interface and we got one implementation but 
will this code work.
because we doesn't run the code in last video 
Now if we run the program we got error. This error will look 
interesting let's see what the error is 
"It cannot resolve the matching constructor"
Ok we are still dependent on constructor. what we will do is we go 
to the property one So, let me comment in 'spring.xml' file 
below section.
          <constructor-arg name="lap" ref="lap1" />
          <constructor-arg name="age" ref="21" />

And let's work with 'property' here.
          <property name="age" ref="21" />
          <property name="lap" ref="lap1" />
And then we got the 'Laptop' now the 'Alien' is basically even it will
not work because "we are looking for 'Computer' And what u got is 
'Laptop'"
In technical words:
 Invalid Property 'lap' of bean class [com.telusko.Alien]:
   Bean property 'lap' is not writable or has an invalid setter.

SO, we don't have lap any more but what we have which is 'Computer'
'com' SO, now what we are doing is 'com' which will refer the 'lap1'
          <property name="age" ref="21" />
          <property name="com" ref="lap1" />

Ok we can done few more changes what will do is we go back to 'Alien'
and comment certain things. I don't want to print this 
"<property name="com" ref="lap1" />" Here instead of 'lap1'
i maintoined 'com'.
          <property name="com" ref="com" />
Now don't you think if we have the same name 'spring' should be
smart enough to automatically connect them If we have to specify this
we are creating a wire.
You have to wire between Your 'Alien' And 'Laptop'.
i wanted this wiring to be done it automatically be 'autowire'.

    <bean id="alien1" clean="org.aniket.Alien" autowire="byName">

What it will do is You are saying to 
"Spring will go to autowire and link them with the help of there names"
what you want in the alien is 'com' and what i have in the 'bean'
defination Is also 'com'.

       <bean id="com" class="org.aniket.Laptop"></bean>
                  -------------NOTE--------------
The movement u say 'autowire' it will search with the name and if u run 
this code problem solve
               <property name="com" ref="com1" />
And if maintoin autowire with 'byName'
    <bean id="alien1" clean="org.aniket.Alien" autowire="byName">
What did you think it will go for 'Laptop' and 'Desktop'.
        <bean id="com1" class="org.aniket.Laptop"></bean>
        <bean id="com" class="org.aniket.Desktop"></bean>
If u predict it's 'Desktop' then u are wrong It's 'Laptop' because
We are explicitly maintoined 'com1' It will prefer your property 
instead of going to 'autowire'.

So, 'autowire' works when u don't have this property maintoined.
If you don't maintoined this we are going for 'autowire'.
But what if we don't even have the 'laptop'.

              ----------NOTE-----------
U can also use 'Autowire' as "byType".
when u have to not use 'Property Name'.

    <bean id="alien1" clean="org.aniket.Alien" autowire="byType">

What is the type of 'com' here? in 'Alien' type of 'com' is 
'Computer'.
In the implementation we have the 'Laptop' which is actually a type
of 'Computer' because it's implement the 'Computer' Interface.
And Now it will not even search for the name. It will search for
the type.
        <bean id="com1" class="org.aniket.Laptop"></bean>
And the same thing in 'Desktop' will same as well.
So, it's not searching by name it's searching by 'type' but what if 
just uncomment 'Laptop' What if you have both 'Laptop' and 'Desktop'
at the same time.
    What's the error?
    "Expected Single matching bean but found 2" it's because
Both the bean's are of same type. They have 'Laptop' and 'Desktop'
both are the type of 'Computer'. That's the confusion being the reason
of Error. We can solve this
i. TO specify 'Archtype' 'byName'.
                     ----------X-----------
The Final CODE IS:
          Program of 'Alien'
package com.telusko;

import java.beans.ConstructorProperties;

public class Alien {
	
	private int age;
	private Computer com;
	
	public Alien() {
		//System.out.println("Object Created");
	}
	
//	@ConstructorProperties({"age","lap"})
//	public Alien(int age,Computer lap) {
//		System.out.println("Para Constructor Called");
//		this.age = age;
//		this.lap = lap;
//	}
	
	public int getAge() {
		return age;
	}
	
	public void setAge(int age) {    // Setter Injection
		//System.out.println("Setter called");
		this.age = age;
	}
	
	public Computer getCom() {
		return com;
	}
	
	public void setCom(Computer com) {
		this.com = com;
	}
	
	public void code() {
		System.out.println("Coding");
		com.compile();
	}
	
}
        PROGRAM OF 'App'
package com.telusko;

import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App 
{
    public static void main( String[] args )
    {
        
    	ApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");  // create a container
    	Alien obj1 = (Alien) context.getBean("alien1");
//    	obj1.setAge(21);
    	System.out.println(obj1.getAge());
    	
    	obj1.code();
//    	
//    	Alien obj2 = (Alien) context.getBean("alien1");
//    	System.out.println(obj2.age);
//    	//obj2.code();
    	
    }
}
             PROGRAM of 'Computer.java'
package com.telusko;

public interface Computer {

	void compile();
}
            PROGRAM OF 'Desktop.java'
package com.telusko;

public class Desktop implements Computer {

	@Override
	public void compile() {
		System.out.println("Compiling using Desktop");
	}
}
               PROGRAM of 'Laptop.java'
package com.telusko;

public class Laptop implements Computer{
//	public Laptop() {
//		System.out.println("Laptop object created");
//	}
	
	@Override
	public void compile()
	{
		System.out.println("Compiling using Laptop");
	}
	
} 
