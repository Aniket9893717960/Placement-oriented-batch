Now it's a good time to talk about how to take input from user
i know u are the preple waiting for the long time because
we have talk about different concepts

May be u have this question in your mind ok 
Everything looks good we talk about 'objects classes
,inheritance and polymorphism'.

But how we take it from the user because in between 
i maintoined that what if the value will come from the 
user and at the same point you were thinking how?

So ok we talk about this in 'video no 92'.

So, basically if you want to print something on the console
we just say
        System.out.println();
ok u just understand this first that 'println' is a method
if i asked u somthing that about it that 'println' method
belongs to which class or it's the method of which class.

it's an interview question where allot of prople say that
'println' is the method of 'System' class but that's not
the case.

See if i press my button on 'Windows' or 'shift' then
and i will click on 'println' is a method which belongs to
'Printstream'. 

Here 'PrintStream' is a class and 'println' is the method of 
this class. That means if you want to call 'println' u have 
to first create an object of the 'PrintStream'.

But don't worry about this u don't want to create an object 
the bueaty is the object is already created u already have an
'out' object. 

And we are using this object from a long time.
'out' is the object of 'PrintStream' but this 
object is created as the 'static' variable inside the
'System.class' 

So, since 'PrintStream' is 'static' we can use 'out' with the
help of 'System.out' and 1's u got access to the 'out' object
u can call 'println' and that's what we have here.

----------------------------------------------------------------------------------------------

what if we try to take input from the user. Just like
    System.out.println("Enter the no.");
just we write to 'Enter the no.' so, at this case we say
'Enter a no.' how can i accept it.

That's tricky right so, what should be the solution here
if you come to different programming languages like C,C++
we use 'printf,Scanf' in 'C' at 'C++' we use 'cout,cin'.
It's straight forward because this are straight forward 
methods.

If i go to 'System.class' then there should be two objects.
'out' which we sow previous and we see about 'in' so,
it's also an 'Static' method and this object 'in' is of type
'InputStream'.
O we do have it if i go back to the program and try to use
'System.in' for input there should be read so we have 'read()'
method.
         'System.in.read();'
it returns a 'read()' value but the only thing is it might 
throw an Exception called 'IOException' u know what is 
'IOException' now. 
U have  a choice to handle an Exception and it's a 'checked'
Exception it's your job to handle it 'compiler' will force you
to do that. you have two options

i) Either use try catch here
ii) u say 'throws IOException' at main method

Not a good idea but works for this code Because we are learning
so we can do that But if you are making an 'Application' don't do that

Next we done the thing that the output 'integer' values will gone for 
'num' which contain 'read' output.If you done this you can Either
Perform any operation and print the value of 'num'.


Import java.io.IOException;
public class Demo {
 public static void main(String args[]) throws IOException{
  System.out.println("Enter a number");
  int num = System.in.read();
  System.out.println(num);
  }
}


But i u typing any no. and you Enter in the output it will give you
two digit different value This ANONYMOUS thing happen because 'read()'
method  will return the ASCII code of your Entered Element.

Exapmle :
        If i Enter 'A' your output will be '65'
        for small 'a' it's '97'
        for '0' it will '48'

So, basically it doesn't given the Exact value he will give the ASCII 
representation of the value OK that's tricky actually.

We will manage it but it's not the ideal way to taking an input but 
that's what java provides you they will ever give you to read the 
ASCII value of given no.

But what if i want to give a bigger no. Just like i Entered '55'
so, it only give answer 54 because it only get the first character 
u Entered at a time.
If you try to Enter multiple character you can use loop but i request
u to dont do that.

----------------------------------------------------------------------------------------------

'Java' Says don't worry i will give/provide u a specialized class for this
So, instead u use 'read()' method u have the specail options because there 
is a concept called 'BufferedReader'.

'BufferedReader' is basically a class which works with 'IO' and it
belongs to a package 'java.io' so, if u want to use 'BufferedReader'.

Uhave to Import 'java.io' to use 'BufferedReader' so, 'IO' the most
of the methods or pre -defined keyword are belongs to 'java.lang' which
was pre-imported. if you were using any class which is not there u can use
and Explicit maintiond about this package.

we have to create an object of 'BufferedReader' class like this:
     BufferedReader bf = new BufferedReader();
But what's next the thing is if you want to read we have to actually
pass an object of the Reader

There is one more class which we have to work with it's leanthy that's
how Java implemented it but there is a better way as well.
So, we have to create an object of 'InputStreamReader' like:

    InputStreamReader in = new InputStreamReader();
And what ever your object is created here(Just like 'in') at this case.
            BufferedReader bf = new BufferedReader(________);
u will insert in 'BufferedReader' at this case.  here  ^

The Job is done but there is a problem here because 'InputStreamReader'
also need an object of 'InputStream'
U know that 'InputStream' have an object 'in' at the class 'System.class'
So, what can u do in 'InputStream' object is :

    InputStreamReader in = new InputStreamReader(System.in);
we know that's it lettle bit complex so, in the letter version he will 
introduce a solution which is bit Easier.

U can use this option as well that people were using it in very long time.

Now all this happen then create a 'integer' variable name 'num' and initialize
it with 'BufferedReader' object method to read the line on the console screen
with the help of method 'readLine()'.

But the only problem is'readLine()' will give u 'String' Datatype as output.
But we don't want 'String' we want 'Integer' to do that we use the
specail class called 'Integer.parseInt' which we have seen already.

Now if i try to print the no. it should work. Otherwise we have wasted so 
much time on this.
We check to build the Program below.

import java.io.IOException;
import java.io.InputStreamReader;

public class Demo {
 public static void main(String a[]) throws IOException {

  System.out.println("Enter a number");

  InputStreamReader in = new InputStreamReader(System.in);
  BufferedReader bf = new BufferedReader(in);

  int num = Integer.parseInt(bf.readLine());
  System.out.println(num);
 }
}

SO, basically this is how u take input from the user. There is again 
one more let me show you after some time. But the important thing is
whenever we use 'BufferReader' it always trying to access 
'InputStreamReader'.

but the important point is 'BufferedReader' can take an input from anywhere 
not just from 'System' Keyboard But it also take input from the file,
network and whatever u were trying to take an input from file. Then
u can maintoined all the stuff.

'BufferedReader' whenever u were using it it's actually a resource.
Now why it's a resource let's say whenever u were trying to ride on a file
of course file is a resource whenever u were open the file.
It's your responsibility to close it.

whenever u open the network it's your responsibility to close it.
whenever u open the database connection it's your responsibility to
close it so, how will u close it.
U can close 'BufferedReader' with this command.

             'bf.close()'
In the End of the program.so, it's always a good idea to close the resources
Obviously it will not give an error but it's always a good practices 
Otherwise u were leacking the file,u were licking the data
u are keeping the resource busy the thing is if u are using the
resource so, the evil person will also check it.
----------------------------------------------------------------------------------------------
Insted of using 'BufferedReader' u will use 'Scanner'

if u can see to 'Scanner.class' so, it was introduce at '1.5'
So, people before '1.5' using 'BufferedReader' i know Bad Days but
Yes

we use 'Scanner' class here or build it's object name 'sc'
U can build object with the help of 'new' keyword.
But u have to also pass the 'InputStream' as the parameter
on to the 'Scanner'.

With the help of 'System.in' we got the input from the console
u can get the input from the file

for this object of 'Scanner' we have to call 'nextInt' method 
and it's returned value will be initialized at 'Integer'
variable.


In the next video we will view about more alternatives to manage
about how to close resouces.
