Now let's send the response. So, what you can do is if you want to send a 
response from a servlet. This is where you have to make the changes.
Now, how do you send a response?

If you can see we do have a response object here, right? So we can 
simply use this object and we can send a response. See anyway, when you
run the servlet, the client will receive the data from response.

But by default is empty. we have to send some data, right? And to do that
we have to get the hold on the writer. It's more like a taking a pen. So,
"Response Object" is a paper, get the pen first.

CODE IN 'HelloServlet':
                   res.getWriter().println("Hello World");
'getWriter' And with this it is a method called 'println' and whatever you
want to print, you can print it here. So, I will just print "Hello World".
Okay, our job is done it's just that it might throw an exception.
So, i will simply add the exception signature here, or the exception,
which is throws 'IOException'.

And that's it. we are sending data back to the client. I'm sending 
"Hello World". So, what we did is response object was anywhere, was going 
to client. We just writing some content on it.

So, it's like, anywhere the servlet is going to return a page which is 
empty. I just took a pen and have written "Hello World". Okay, let's
see if this works.

CODE AFTER DOING ALL STUFF "HelloServlet"
package org.aniket;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
public class HelloServlet extends HttpServlet {
    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException {
        System.out.println("In Service");
        res.getWriter().println("Hello World");
    }
}

After running this program we got "Hello World" at "Localhost" browser
Okay, now if you're not comfortable with this, sometime you want to 
know this "getWriter" gives you.

So, there's another way you can do this.
i. "response.getWriter": And this 'getWriter' returns you the object of
                         'PrintWriter', right? So, i can simply say
'PrintWriter' and i will say this is maybe "out = res.getWriter". And 
every time you want to print, now u simply say "out.println" in below.

        ---------------NOTE---------------
We already familiar with 'System.out.println();' and 'out.println' both looks very similar to each other. But the difference is 
i. "System.out.println" prints on the console. while 'out.println'
   depends upon from where you got this 'out' object. We are getting it 
because from the response. This will write in the response object.

And not just this, you can also mention the tags. Because we are using an
"HTML" page, right? So, we can also mention this is a "<h2>", maybe if 
you want to make it italic, a bold if you want.
         ----------------X--------------------
Now since we are adding "HTML", we can do this stuff.
CODE IN 'HelloServlet' AFTER MORE STUFF:
package org.aniket;

import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.io.PrintWriter;

public class HelloServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    public void service(HttpServletRequest req, HttpServletResponse res) throws IOException {

        System.out.println("In Service");
       // res.getWriter().println("Hello World");

        PrintWriter out = res.getWriter();
        out.println("Hello World");
    }
}

On refershing, you can see we are getting HTML tags. Now since we are 
adding HTML, we can do this stuff. let's read in this. before we can do
sending it, we can set the type of data the response will have.

So, you can set 'response.setContentType' and you can mention the content
type is text/html. Now what it'll di is it'll understand, hey you are also
sending HTML not just a plain text. So, it'll try to convert your HTML.
