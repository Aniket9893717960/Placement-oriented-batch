              -----------NOTE------------
The moment i will create the project the first file we see the 'pom.xml'
And we have talk about in maven this is the file which helps maven to 
understand what u need So, by default we got only one dependency
Which is "junit 3.8.1" So, that's why when u open the external
libraries u find 'junit' there.
              ------------X--------------
It's time to start with the spring framework.
Before this we have written the code with 'Spring Boot'.
And Now we know how is it to work with spring boot.

The problem is Of course we use all the annotations.
We can ask to manage certain things to manage 'Beans' or
certain object's for us.

But for that we have to use some annotations. we have 'component'
And if u want to connect them we have 'Autowire' we know those 
things.
But if u want to understand what is happening behind the seen
And how things are moving behind the seen First we have to understand 
How spring works.

That we have to write the code in 'spring framework' without spring boot.
And to done that let's create a new project.
So, let's get back to IDE we are using 'Intellij' here.

Now here u can click on file 'New' And let me create a new project
And mind u we can create a maven project Not spring boot.
Because when we go to spring project. We start with "start.spring.io" 
And we got the project structure.

              ------------NOTE----------
We have to select basic 'Archtype' in 'Maven Archtype' as 'quickstart'
Because it create a basic structure and u can import anything u want.
               ------------X--------------
Now we will go to src -> main -> java -> com.telusko
Where we already have 'App' file 
Even when u start to work in first check the basic model is working 
or not.
Because there might be some issues Exist in real world So, first we run 
the main file.
After that if this will not working then u have to blame your self.

But we don't want to print "Hello World" we want to create an object
of 'Alien' here.
we use the command.
                "Alien obj = new Alien();"
But here is 2 problem 
i. We don't have a class name 'Alien'.
ii. we don't want to get this object by our self.

We solve the two problems.
1st we create the 'Alien' class.
2nd insert the method name 'code' And print "Coding".

Now we will call the 'Alien' object 
                               'obj.code'
It's always better to check that all the things are working at every 
stage Specially at the logic stage.

The Full code at this stage is:
             i. App.java File
     package com.telusko;
     public class App {
      public static void main(String[] args){
       Alien obj = new Alien();
       obj.code();
      }
     }

               ii. Alien.java File
     package com.telusko;
     public class Alien {
          public void code(){
             System.out.println("Coding..");
          }
     }

Now i want to basically get the object with the help of 'Spring' 
framework. Now how will u do that

Now we will create a container And u can remember 'spring' will have
it's own container called 'IoC-COntainer'.
Now every time u will ask 'spring' to create the object for u It will
create the object and keep that in the container.

But no where we are talk about we used the object called 'spring'.Here In
This code no where we want to create a container. 
Now we want to create a container we have to use something called 
"Application Context".

               ----------NOTE----------
"Application Context" will be responsible to work with that container
but it's not the only option actually we have two options.
1's 'Bean' factory Which is the old one And 'ApplicationContext' is the
new one.
Both does the same thing. Basically it will create the container.
And help u to create the objects from the container.
Why we will not Using 'Bean' factory because it's an old one.
'ApplicationContext' provide all the features of 'bean' factory '+' some
additional feature.
              ---------------X-----------
So, we are going to use 'Application Context'.
And 'Bean' factory the classes which implements 'bean' factory they are
also out dated and depricated or most of them has been removed.

From Spring 6 So, it's good to use 'Application context'.
ok if u can see 'Application COntext' if u try to say 'CTRL + Space'
so, there is no suggestions.
Because we have to import this Because it's not the part of Java It's 
a part of 'Spring' framwork.

To get this class we need to get some Internal packages and some
External Packages. That means we have to add the spring dependency.
           -------------NOTE---------------
If we deep drive in 'Application Context' basically it's an Interface.
It can extends allot of different classes here We choose one of the to 
click is "ListableBeanFactory" it extends 'Bean' factory So, by detault
we can say that this 'Application context' is a supper set of 'Bean' 
factory so, what ever u wanted to done a 'Bean' factory U can done in 
'Application Context'.
            --------------X----------------
But the question arrise how can u create a object what are the classes 
which can implement this So, depend upon the class there are allot of 
classes which implement this let's say we have Allot of options there 
but we wanna use 'ClassPathXMLApplicationContext()'.

           -----------NOTE--------------
the thing is There are different ways to configure the spring object 
and one of them is 'Xml' So, in this perticular context we talk about 
'XML' Then we move towards Java Based And Then At last we end up with 
Annotations.

So, we go step by Step Using this context I can simply say once u got 
the configuration object what we will do is we will create the 
container for u.

 ApplicationContext context = new ClassPathXMLApplicationContext();

Basically Above command basically create the container for u And then
with that container we simply say 'context.getBean();'And on this I can
Ask for the object What kind of object i want I basically say 'Alien'
Again what this 'Alien' says 
Now 'getBean' will give u the object from the container But Basically 
it will give u a type of object.
ANd now we simply do 'TypeCasting' And that's it your job is done.

But if we run the program we got the error 
"BeanFactory not initialized or already closed - call 'refresh' before
accessing beans via the ApplicationContext".

The Full code at this stage is: "Main" '.java'
 package com.telusko;
 import org.springframework.context.ApplicationContext;
 import org.springframework.context.support.ClassPathXmlApplicationContext;

public class App {
 public static void main(String[] args){
  ApplicationContext context = new ClassPathXMLApplicationContext();
  Alien obj = (Alien) context.getBean("alien");
  obj.code();
 }
}
