So, our project is ready, i mean the structure is ready. Now let's create 
a servlet. Now if you think about creating something in java, So, lelt's
say if you want to create a feature, we create a class right?

So, here also if you want to create a servlet, u have to create a class.
So, what i will do is i will just go back to my project. I'll right click
here and say new.

let me create a simple class here and we'll name this class as, let's say
"HelloServlet". Of course you can name anything you want, but having a 
servlet at the send defines or it tells the developers that, 
"hey, this is a servlet, right?".
CODE:
    package org.aniket;
    public class HelloServlet {
    }

So, use a proper name. So, we got "HelloServlet". The only purpose ofthis
"HelloServlet" is to greet the user. So, whatever you want to do, maybe you want to say "hello world" or something.

I just want to show something on the screen. Okay, so this is ourservlet,
But is it? Just by writing this as a servlet, will it make a servlet?
Of course Not. We have to do some extra thing as well.

See, one of the way to give the feature of a servlet to this class is by 
extending a class called "HttpServlet".
CODE:
    package org.aniket;
    public class HelloServlet extends HttpServlet {
    }

If you talk about servlet, it has multiple features, right? Accepting 
the request from the user and responding to the user. So, basically for 
request and response, we need special objects.

                 ____________NOTE______________
And the way you can get that if you extend a class by 'HttpServlet'.So, 
basically we need 2 things the request and the response, and also we 
need a method which will execute whenever you get the request.
                 -------------X-----------------

which method i talk about? So basically i have to create a method here.
We use 'public' acess modifier with return type 'void' method name
Is "service".
CODE:
    package org.aniket;
    public class HelloServlet extends HttpServlet {
     public void service(){}
    }

What is 'service'?Now 'Service' is one of the important method in 
servlet,  which gets executed whenever you send a request. Okay?
now question arrise How will you accept the data from the client?
See, in this example, I don't want to send any data from client to
server.

Which u want to send the request,but i want to send the data back to the
client. but let's say if you are working on real life and you want to
send some data from the client to the server, you need an object from 
where you can do that And that's where in the 'service' we have to pass
two parameters, one for the request.
one for the response.

And the request respone will get in the form of "HttpServlet request".
This is a special interface which has multiple methods to work with,
but we don't have to define those methods.

The internal implementation will do it for you, okay? So, we just have to
create the object for this or the reference for this, which will be 
called request And 'HttpServletResponse'.

So, this tool we need. Now whatever data coming from the client will be
stored in request object, and whatever data you want to send back to the 
client.

That will be present in the response object. Or u can add that into 
response object. Okay, So, instead of requesting object or responding at 
this point, what i want to do Is i just to check if this method is 
getting called.
CODE At this point in 'HelloServlet'.java
    package org.aniket;
    public class HelloServlet extends HttpServlet {
    public void service(HttpServletRequest req, HttpServletResponse res){
       System.out.println("In Service");
      }
    }

Just we have to print 'In Service' as the first step So, will this work
That's a real question, Now question arise, how do we run this? If you
go back to 'App.java' And run the main file, okay? But if we run 'main' 
program It only say "Hello World!" but nowhere 'In Service' Reason?
If you want to execute a 'service' or if u want to execute a 'servlet'?

You have to send a request from your browser, right? we are building a 
web application. So, what i will do is open browser and here you have to
send a request.

Now where do you send a request? So basically you have to send a request
to the "local host" and u have to maintoied a port no. and by default, 
if you talk about 'Tomcat', it goes with the "8080" port no.

So, we stik it and when i say enter, i want something to display here,
and you can see it says cannot reach. That means something is not 
working. You Know what is not working, "NOTHING IS WORKING".

I mean, the only thing which is working is "Hello World". This servlet 
is not getting called. we need to call this. How do we do that? So, 
besically we do have Tomcat, right? So, we need to run this tomcat
by default it's not running.

If it is running, you will see the message in the console.At this point,
It's not running. so, what i will do is we run the tomcat So, after 
printing 'Hello World', let's say i want to run the 'Tomcat'.

How do i do that
i. Create an object of Tomcat.
CODE Now in 'App.java':
        Tomcat tomcat = new Tomcat();
Now we got this object.

ii. How do you start the server? To start the server, It's vary simple.
    You can simply say "Tomcat.start", your job is done. This will start
the Tomcat. You can see there are some errors It says it might throw an
exception.
CODE NOW in 'App.java':
                      tomcat.start();
So, i will add it to the signature.It might throw a lifecycle exception.
So, let's do that. And that's it. This thing will run the 'Tomcat'.
But we got allot of error messsages given below:
 # "Starting service": which is the 'Tomcat Service' and 'Protocol 
    Handler'. 
But at least it says starting the Tomcat. Let me go back to the browser 
and refresh. But it says nothing is working. I mean, 'it's still not 
working'.
Now  we will go back to 'App.java'. we are starting a Tomcat, and after
starting, it's also ending the Tomcat. If you can see process finished,
we wait Tomcat to wait.

iii. You know, Tomcat is a server, it's job is to keep running, and we 
not keeping it running. So how do you keep it running? so, it's very 
simple. 
CODE in 'App.java'.
                   tomcat.getServer();
So, basically get the hold on the server, and say 'await', which means
we are asking 'Tomcat' to wait, keep running.
CODE in 'App.java'.
                   tomcat.getServer().await();
I will send the request later. Okay? So, at least this time the server
will not stop. And you can see we don't have process exit, that means
'Tomcat is running now'.

Okay, now this time we got a different message,okay?we not got 404. 
That means the Tomcat is running the only problem is it not able to 
handle the request.

But the main question is why? because 'Tomcat' is doing a great job he
running It says "Hey, it will run your servlets. And we do have the 
servlet name 'HelloServlet'". But then how a Tomcat will know when to 
call this servlet?

Let's say if  we talk about any website you have multiple page there, 
right? So, when you access a particular page, you give a URL.
You mentioned the website name slash sormthing, right? So, here also,

I want to make sure that when i run "localhost:8080/hello" this time
I want to print, I want to call that servlet. That means we have to do
the mapping for this hello with our servlet. If we can done that our 
job is done Now the question is how we map it lt's see in the next video.
Final 'App.java' Code:
    package org.aniket;
    public class App 
    {
        public static void main( String[] args )
        {
            System.out.println( "Hello World!" );
            Tomcat tomcat = new Tomcat();
            tomcat.start();
            tomcat.getServer().await();
        }
    }

