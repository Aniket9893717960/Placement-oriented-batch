In the previous video we talk about 'ParallelStream' Right So, in this video 
let's try to Explore the Example
Or Let's say the power of It. As i maintoined before if you want to work with
Parallel Stream And if you want to say the effective concrite u need huge amount
of data.

At this point we don't have the huge amount of data. So, let's create huge amount
of data. Let's assume that we create a list of no. let's say list of integers
here. Let's say list we input this with 'new' Array list.

           List<Integer> nums = new ArrayList<>();

And we find this list is Empty So, let's fell this list with how may values 
Let's say '10 thousand' values can we do that
If we create a 'List' so, it has some capactiy So at '()' of 'List'
we write how many space we want we write there '10000' initially 
all the values will contains '0'.

          List<Integer> nums = new ArrayList<>(10000);

Now how we add the '10000' values in the  list that's tricky part
       i. we use 'nums.add' to add all the values Or we can simply use the
          random class with the help of 'For' loop. You were add all the random no.
          But the Question arrise how will you add random no.

So, basically  u have the class called 'random' and we create it's object
'ran'. Like this :
                Random ran = new Random();
And 'Random' have allot of methods like 'nextInt' So, basically you can 
specify what no. you want let we give you that no. and also u maintoined 
the bound that what type of value u want
If you check under the 'nextInt' So, i want bound to be '100' but i don't 
want 1 value right.
So, i will use a 'for' loop start from i is equal to 1 and i will go for
the last value which is '10000' Or the better could be u create a variable
let's say 'size' which initialized as '10000'
And if you want to Differentiate no. of Zero's

               for(int i =1;i<=size;i++){

               }

So, in this particular loop basically i want to add the element in the 
'nums.add' so, what no. i want to 'add' it's something the random class
will give us.
So, we can say 'ran.nextInt' by doing this u got '10000' values in the list.

               for(int i =1;i<=size;i++){
                    nums.add(ran.nextInt(100));
               }

If you want to see that u actually print and see what type of values u
got there Let's see the actual Program.
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;

  class StreamEx {
       public static void main(String args[]){
           int size = 10_00;
           List<Integer> nums = new ArrayList<>(size);

           Random ran = new Random();

           for(int i=1;i<=size;i++){
               nums.add(ran.nextInt(100));
           }

           System.out.println(nums);
       }
  }

So, what you wanna do with this values So, i want to multiply every
value here by '2' and that's the simple thing we can do of course 
we can do a lot of different stuff but here just we try to do 
multiplication by '2'.
And we also add the values and we have done this before right
So, get the value 'multiply by 2' and find the sum out of it.

In this video we also intoduce to a new method called 'mapToInt'
which will give you a way to add all the value and we have used 
'reduce' before But the syntax right So, let's make easy Now
Actual we doesn't not want this output and we don't need to work with 
this program any more.

But what i will do is i want to add all the values and how do we know it
that we want to add all the value.
Is we doesn't use a 'Parallel Stream' as we use just a normal 'Stream'
and we put that here so, just i wanna do is

Previous Methods we learned :
    int sum1 = nums.stream().map(i -> i*2)
                   .reduce(0, (c,e) -> (c+e));
 But instead of '.reduce' if we try to use '.sum' then it will not work because 
'.sum' will only work on when you return only the 'int' not the normal Stream.
But i will say that 'hey won't some operations on integer here' Then convert the
Entire 'stream' with the help of '.mapToInt'

         If you can see at '.mapToInt' then it's return You the object of
'IntStream' If you click on 'IntStream' but we have to find the 'sum'
method And this is basically add all the values.

      int sum = nums.stream()
                    .map(i -> i*2)
                    .mapToInt(i -> i)
                    .sum();

If you print 'sum' and 'sum1' then both return's the same value.
Now i have initialize the value 'sum2' which will work but there 
is one change in method 'nums.stream()' will replace 
'nums.parallelStream' let's see we got the same value of not.

      int sum = nums.parallelStream()
                    .map(i -> i*2)
                    .mapToInt(i -> i)
                    .sum();

How will you see the speed let's work with only 'sum1' and 'sum2' and
ignore 'sum' at this point i don't want to print 'sum' any more Now
how will you see tha difference we can set the timer right to
see after this after this to see the difference.

So, we will create a variable here i will go with the variable long
I can say 'startSeq' and how will you get time so, it will help of 
'System.currentTimeMills' so, what will it return is 
    --------------------NOTE--------
'The Current Milli Seconds from the time 1970's' So, that
s where the 'unix Epoch' come into existence So, basically it will
             ----------
give you the current time in milli seconds 

          long startSeq = System.currentTimeMillis();
          /* After this sum code '.mapToInt' implementation start */

So, once you done this past it Between '.mapToInt' and 'parallelStream'
implementation.
          long endSeq = System.currentTimeMillis();
          long startPara = System.currentTimeMillis();
        /* After this sum2 code 'ParallelStream' implementation start */
At last
          System.out.println("Seq :"+ (endDeq + startSeq));
          System.out.println("Para :" + (endPara - startPara));

i want you to guess which one is faster is it 'Parallel' 
               ---------NOTE--------
Of course Logically it should be 'Parallel' But i am not sure 
which one will get more time So, the thing is whenever you have the
simple operations like this 'parallelStream' will take more time than
'Stream' is it because 'ParallelStream' is responsible to create the threads.
And creating Threads takes time.
Sequential Stream will not working with multiple threads it working with
single thread and say 'Let's get the job done' For your Normal computer
computation of normal numbers should be Easy
So, i were gessing parallel Should be faster than Sequential
